# Cursor Rules - 코드 스타일 및 데이터베이스 모델 표준화

## 🎯 기본 원칙
- 항상 한국어로 응답하고 한국어 주석 작성
- 일관성 있는 코드 스타일 유지
- 보안 및 성능 최적화 고려

## 📝 코드 스타일 규칙

### JavaScript/Node.js 스타일
- 들여쓰기: 2칸 공백 사용
- 세미콜론: 항상 사용
- 따옴표: 작은따옴표(') 우선 사용, 문자열 내 따옴표가 필요한 경우 큰따옴표(") 사용
- 변수명: camelCase 사용 (예: employeeName, departmentId)
- 상수명: UPPER_SNAKE_CASE 사용 (예: MAX_RETRY_COUNT, DEFAULT_TIMEOUT)
- 함수명: camelCase 사용, 동사로 시작 (예: getUserById, createEmployee)

### 파일 구조
- 파일명: PascalCase 사용 (예: Employee.js, UserController.js)
- 폴더명: kebab-case 사용 (예: user-management, data-processing)
- 한 파일당 최대 300줄 권장, 초과 시 모듈 분리

### 주석 작성
- 파일 상단: 파일 목적, 주요 기능, 작성자 정보
- 함수: 기능 설명, 매개변수, 반환값, 예외사항
- 복잡한 로직: 한국어로 상세 설명

## 🗄️ 데이터베이스 모델 표준화

### Mongoose 스키마 규칙
- 스키마명: PascalCase + Schema (예: employeeSchema, userSchema)
- 필드명: camelCase 사용
- 필수 필드: required: true 명시
- 기본값: default 속성으로 설정
- 검증: validate 속성으로 비즈니스 로직 검증
- 인덱스: unique, sparse 등 성능 최적화 고려

### 필드 타입 표준화
- ID 필드: mongoose.Schema.Types.ObjectId 사용
- 날짜 필드: Date 타입 사용, ISO 형식 권장
- 숫자 필드: Number 타입, 정수/실수 구분
- 문자열 필드: String 타입, enum으로 제한값 설정
- 배열 필드: [Type] 형태로 정의
- 객체 필드: 중첩 스키마 또는 Mixed 타입

### 관계 설정
- 참조 관계: ref 속성으로 모델 연결
- 가상 필드: virtual 속성으로 계산된 필드 구현
- 인덱스: 자주 조회되는 필드에 인덱스 설정

## 🔒 보안 규칙
- 환경변수: 민감한 정보는 .env 파일에 저장
- 입력 검증: 사용자 입력에 대한 검증 로직 필수
- SQL 인젝션 방지: Mongoose 사용으로 자동 방지
- 세션 관리: 안전한 세션 설정 및 만료 시간 설정

## 📊 성능 최적화
- 데이터베이스 쿼리: 필요한 필드만 선택 (select)
- 페이지네이션: 대용량 데이터 조회 시 limit/skip 사용
- 캐싱: 자주 조회되는 데이터는 캐싱 고려
- 비동기 처리: async/await 사용, Promise 체이닝 지양

## 🧪 코드 품질
- 에러 처리: try-catch 블록으로 예외 상황 처리
- 로깅: 중요한 작업에 대한 로그 기록
- 테스트: 주요 기능에 대한 단위 테스트 작성
- 문서화: API 엔드포인트 문서화

## 🚫 금지사항
- 하드코딩된 비밀번호나 API 키
- console.log 대신 적절한 로깅 시스템 사용
- 동기 함수 사용 (성능 저하)
- 글로벌 변수 사용
- 마법 숫자 사용 (상수로 정의)

## ✅ 권장사항
- 일관된 네이밍 컨벤션 유지
- 코드 리뷰 및 리팩토링 정기 수행
- 의존성 최신 버전 유지
- 정기적인 보안 업데이트
- 성능 모니터링 및 최적화
