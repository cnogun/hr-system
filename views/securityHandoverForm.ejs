<%- include('header') %>

<style>
        
    .container {
        max-width: 1200px;
        margin: 0 auto;
        background: white;
        padding: 30px;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
        
        .header {
            text-align: center;
            margin-bottom: 30px;
            border-bottom: 2px solid #333;
            padding-bottom: 20px;
        }
        
        .title {
            font-size: 28px;
            font-weight: bold;
            margin-bottom: 20px;
        }
        
        .form-section {
            margin-bottom: 25px;
            border: 1px solid #ddd;
            border-radius: 5px;
            overflow: hidden;
        }
        
        .section-header {
            background-color: #f8f9fa;
            padding: 10px 15px;
            border-bottom: 1px solid #ddd;
            font-weight: bold;
            font-size: 14px;
        }
        
        .section-content {
            padding: 20px;
        }
        
        .form-group {
            margin-bottom: 15px;
        }
        
        .form-row {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 15px;
        }
        
        .form-label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
            color: #333;
        }
        
        .form-control {
            width: 100%;
            padding: 8px 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
        }
        
        .form-control:focus {
            outline: none;
            border-color: #007bff;
            box-shadow: 0 0 0 2px rgba(0,123,255,0.25);
        }
        
        .medium {
            min-width: 200px;
        }
        
        .small {
            min-width: 120px;
        }
        
        .handover-item {
            border: 1px solid #e9ecef;
            border-radius: 5px;
            padding: 15px;
            margin-bottom: 15px;
            background-color: #f8f9fa;
        }
        
        .item-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            padding-bottom: 10px;
            border-bottom: 1px solid #dee2e6;
        }
        
        .item-title {
            font-weight: bold;
            color: #495057;
        }
        
        .remove-btn {
            background-color: #dc3545;
            color: white;
            border: none;
            padding: 5px 10px;
            border-radius: 3px;
            cursor: pointer;
            font-size: 12px;
        }
        
        .remove-btn:hover {
            background-color: #c82333;
        }
        
        .add-btn {
            background-color: #28a745;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            margin-top: 10px;
        }
        
        .add-btn:hover {
            background-color: #218838;
        }
        
        .checkbox-group {
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .btn-group {
            display: flex;
            gap: 10px;
            justify-content: flex-end;
            margin-top: 40px;
            padding-top: 20px;
            border-top: 1px solid #e9ecef;
        }
        
        .btn {
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            text-decoration: none;
            display: inline-block;
            text-align: center;
        }
        
        .btn-primary {
            background-color: #007bff;
            color: white;
        }
        
        .btn-secondary {
            background-color: #6c757d;
            color: white;
        }
        
        .btn-outline-secondary {
            background-color: white;
            color: #6c757d;
            border: 1px solid #6c757d;
        }
        
        .btn:hover {
            opacity: 0.9;
        }
        
        @media (max-width: 768px) {
            .form-row {
                grid-template-columns: 1fr;
            }
            
            .item-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 10px;
            }
            
            .btn-group {
                flex-direction: column;
            }
        }
    </style>

<div class="container mt-4">
        <!-- 헤더 -->
        <div class="header">
            <div class="title">보안업무 인계장 작성</div>
            <div style="font-size: 14px; color: #666; margin-top: 10px;">
                보안요원 간 업무 인계 및 특이사항 전달
            </div>
        </div>

        <form method="POST" action="/handovers/security" id="securityHandoverForm">
            <!-- 기본 정보 -->
            <div class="form-section">
                <div class="section-header">□ 기본 정보</div>
                <div class="section-content">
                    <div class="form-row">
                        <div class="form-group">
                            <label class="form-label">인계장 날짜</label>
                            <input type="date" name="handoverDate" class="form-control medium" 
                                   value="<%= new Date().toISOString().split('T')[0] %>" required>
                        </div>
                        <div class="form-group">
                            <label class="form-label">부서</label>
                            <select name="department" class="form-control medium" required>
                                <option value="">선택하세요</option>
                                <option value="보안1팀">보안1팀</option>
                                <option value="보안2팀">보안2팀</option>
                                <option value="보안3팀">보안3팀</option>
                                <option value="전체" selected>전체</option>
                            </select>
                        </div>
                    </div>
                </div>
            </div>

            <!-- 보안업무 인계사항 -->
            <div class="form-section">
                <div class="section-header">□ 보안업무 인계사항</div>
                <div class="section-content">
                    <!-- 인계 유형 선택 -->
                    <div class="form-group" style="margin-bottom: 20px; padding: 15px; background-color: #f8f9fa; border-radius: 5px;">
                        <label class="form-label">인계 유형</label>
                        <div style="display: flex; gap: 20px; margin-top: 5px;">
                            <label style="display: flex; align-items: center; font-weight: normal;">
                                <input type="radio" name="handoverType" value="work" style="margin-right: 5px;">
                                작업 인계
                            </label>
                            <label style="display: flex; align-items: center; font-weight: normal;">
                                <input type="radio" name="handoverType" value="security" checked style="margin-right: 5px;">
                                보안업무 인계
                            </label>
                        </div>
                    </div>
                    
                    <div style="background-color: #e3f2fd; padding: 10px; border-radius: 5px; margin-bottom: 15px; font-size: 13px; color: #1976d2;">
                        <strong>📋 보안업무 인계 가이드:</strong><br>
                        • 출입통제, 순찰업무, CCTV모니터링 등 보안업무 구분을 선택하세요<br>
                        • 근무 구역과 담당 보안요원을 명확히 기록하세요<br>
                        • 보안상 특이사항이나 의심 상황을 상세히 기록하세요
                    </div>
                    <div class="handover-items" id="handoverItems">
                        <!-- 기본 인계사항이 JavaScript로 추가됩니다 -->
                    </div>
                    <button type="button" class="add-btn" onclick="addHandoverItem()">
                        <i class="fa-solid fa-plus me-1"></i>보안업무 인계사항 추가
                    </button>
                </div>
            </div>

            <!-- 리다이렉트 옵션 -->
            <div class="form-group" style="margin-top: 20px;">
                <div class="checkbox-group">
                    <input type="checkbox" id="redirectToList" name="redirectToList" value="true">
                    <label for="redirectToList">저장 후 목록으로 이동</label>
                </div>
            </div>

            <!-- 버튼 그룹 -->
            <div class="btn-group" style="display: flex; gap: 10px; justify-content: flex-end; margin-top: 20px; padding-top: 20px; border-top: 1px solid #e9ecef;">
                <a href="/handovers" class="btn btn-secondary" style="padding: 10px 20px; text-decoration: none;">
                    <i class="fa-solid fa-list me-1"></i>목록
                </a>
                <a href="/handovers" class="btn btn-outline-secondary" style="padding: 10px 20px; text-decoration: none; border: 1px solid #6c757d; color: #6c757d; background: white;">
                    <i class="fa-solid fa-times me-1"></i>취소
                </a>
                <button type="submit" class="btn btn-primary" style="padding: 10px 20px;">
                    <i class="fa-solid fa-save me-1"></i>저장
                </button>
            </div>
        </form>
    </div>

    <script>
        let itemIndex = 0;
        
        // 페이지 로드 시 기본 인계사항 추가
        document.addEventListener('DOMContentLoaded', function() {
            const container = document.getElementById('handoverItems');
            
            if (container.children.length === 0) {
                addHandoverItem();
            }
            
            // 인계 유형 변경 시 섹션 동적 변경 처리
            const handoverTypeRadios = document.querySelectorAll('input[name="handoverType"]');
            handoverTypeRadios.forEach(radio => {
                radio.addEventListener('change', function() {
                    updateHandoverSection(this.value);
                });
            });
        });
        
        // 인계 유형에 따라 섹션 동적 변경
        function updateHandoverSection(handoverType) {
            const sectionHeader = document.querySelector('.section-header');
            const addButton = document.querySelector('.add-btn');
            
            if (handoverType === 'work') {
                // 인계사항으로 변경
                sectionHeader.textContent = '□ 인계사항';
                addButton.innerHTML = '<i class="fa-solid fa-plus me-1"></i>인계사항 추가';
                
                // 기존 인계사항들을 작업 형식으로 변경
                updateExistingItemsToWork();
            } else {
                // 보안업무 인계사항으로 변경
                sectionHeader.textContent = '□ 보안업무 인계사항';
                addButton.innerHTML = '<i class="fa-solid fa-plus me-1"></i>인계사항 추가';
                
                // 기존 인계사항들을 보안업무 형식으로 변경
                updateExistingItemsToSecurity();
            }
        }
        
        // 기존 인계사항들을 작업 형식으로 변경
        function updateExistingItemsToWork() {
            const items = document.querySelectorAll('.handover-item');
            items.forEach(item => {
                // 작업 구분 라벨 변경
                const taskTypeLabel = item.querySelector('label[for*="taskType"]');
                if (taskTypeLabel) {
                    taskTypeLabel.textContent = '작업 구분';
                }
                
                // 작업 구분 입력 필드 placeholder 변경
                const taskTypeInput = item.querySelector('input[name*="taskType"]');
                if (taskTypeInput) {
                    taskTypeInput.placeholder = '예: LED 옥외 전광판, 가드레일 작업';
                }
                
                // 담당자 라벨 변경
                const personnelLabel = item.querySelector('label[for*="personnel.name"]');
                if (personnelLabel) {
                    personnelLabel.textContent = '담당자명';
                }
                
                // 장소 라벨 변경
                const locationLabel = item.querySelector('label[for*="location"]');
                if (locationLabel) {
                    locationLabel.textContent = '작업 장소';
                }
                
                // 내용 라벨 변경
                const contentLabel = item.querySelector('label[for*="content"]');
                if (contentLabel) {
                    contentLabel.textContent = '작업 내용';
                }
                
                // 특이사항 라벨 변경
                const additionalInfoLabel = item.querySelector('label[for*="additionalInfo"]');
                if (additionalInfoLabel) {
                    additionalInfoLabel.textContent = '추가 정보';
                }
            });
        }
        
        // 기존 인계사항들을 보안업무 형식으로 변경
        function updateExistingItemsToSecurity() {
            const items = document.querySelectorAll('.handover-item');
            items.forEach(item => {
                // 작업 구분 라벨 변경
                const taskTypeLabel = item.querySelector('label[for*="taskType"]');
                if (taskTypeLabel) {
                    taskTypeLabel.textContent = '보안업무 구분';
                }
                
                // 작업 구분 입력 필드 placeholder 변경
                const taskTypeInput = item.querySelector('input[name*="taskType"]');
                if (taskTypeInput) {
                    taskTypeInput.placeholder = '예: 출입통제, 순찰업무, CCTV모니터링';
                }
                
                // 담당자 라벨 변경
                const personnelLabel = item.querySelector('label[for*="personnel.name"]');
                if (personnelLabel) {
                    personnelLabel.textContent = '담당 보안요원';
                }
                
                // 장소 라벨 변경
                const locationLabel = item.querySelector('label[for*="location"]');
                if (locationLabel) {
                    locationLabel.textContent = '근무 구역';
                }
                
                // 내용 라벨 변경
                const contentLabel = item.querySelector('label[for*="content"]');
                if (contentLabel) {
                    contentLabel.textContent = '보안업무 내용';
                }
                
                // 특이사항 라벨 변경
                const additionalInfoLabel = item.querySelector('label[for*="additionalInfo"]');
                if (additionalInfoLabel) {
                    additionalInfoLabel.textContent = '보안상 특이사항';
                }
            });
        }
        
        // 보안업무 인계사항 추가
        function addHandoverItem() {
            const container = document.getElementById('handoverItems');
            const selectedType = document.querySelector('input[name="handoverType"]:checked').value;
            const isSecurity = selectedType === 'security';
            
            const div = document.createElement('div');
            div.className = 'handover-item';
            div.innerHTML = `
                <div class="item-header">
                    <div class="item-title">${isSecurity ? '보안업무' : '작업'} 인계사항 #${itemIndex + 1}</div>
                    <button type="button" class="remove-btn" onclick="removeHandoverItem(this)">삭제</button>
                </div>
                
                <div class="form-row">
                    <div class="form-group">
                        <label class="form-label">${isSecurity ? '보안업무 구분' : '작업 구분'}</label>
                        ${isSecurity ? `
                        <select name="handoverItems[${itemIndex}].taskType" class="form-control" required>
                            <option value="">선택하세요</option>
                            <option value="출입통제">출입통제</option>
                            <option value="순찰업무">순찰업무</option>
                            <option value="CCTV모니터링">CCTV모니터링</option>
                            <option value="비상상황대응">비상상황대응</option>
                            <option value="보안장비점검">보안장비점검</option>
                            <option value="방문자관리">방문자관리</option>
                            <option value="차량통제">차량통제</option>
                            <option value="기타보안업무">기타보안업무</option>
                        </select>
                        ` : `
                        <input type="text" name="handoverItems[${itemIndex}].taskType" class="form-control" 
                               placeholder="예: LED 옥외 전광판, 가드레일 작업" required>
                        `}
                    </div>
                    <div class="form-group">
                        <label class="form-label">담당 팀</label>
                        <select name="handoverItems[${itemIndex}].assignedTeam" class="form-control" required>
                            <option value="">선택하세요</option>
                            <option value="1반">1반</option>
                            <option value="2반">2반</option>
                            <option value="3반">3반</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label class="form-label">시간대</label>
                        <select name="handoverItems[${itemIndex}].timeCategory" class="form-control" required>
                            <option value="">선택하세요</option>
                            <option value="주간">주간</option>
                            <option value="야간">야간</option>
                            <option value="심야">심야</option>
                        </select>
                    </div>
                </div>
                
                <div class="form-row">
                    <div class="form-group">
                        <label class="form-label">근무 시간</label>
                        <input type="text" name="handoverItems[${itemIndex}].taskDetails.dateTime.date" class="form-control small" 
                               placeholder="예: 9월 22일">
                    </div>
                    <div class="form-group">
                        <label class="form-label">시작 시간</label>
                        <input type="time" name="handoverItems[${itemIndex}].taskDetails.dateTime.startTime" class="form-control small">
                    </div>
                    <div class="form-group">
                        <label class="form-label">종료 시간</label>
                        <input type="time" name="handoverItems[${itemIndex}].taskDetails.dateTime.endTime" class="form-control small">
                    </div>
                </div>
                
                <div class="form-row">
                    <div class="form-group">
                        <label class="form-label">담당 보안요원</label>
                        <input type="text" name="handoverItems[${itemIndex}].taskDetails.personnel.name" class="form-control" 
                               placeholder="예: 김보안">
                    </div>
                    <div class="form-group">
                        <label class="form-label">연락처</label>
                        <input type="text" name="handoverItems[${itemIndex}].taskDetails.personnel.phone" class="form-control" 
                               placeholder="예: 010-1234-5678">
                    </div>
                </div>
                
                <div class="form-group">
                    <label class="form-label">근무 구역</label>
                    <input type="text" name="handoverItems[${itemIndex}].taskDetails.location" class="form-control" 
                           placeholder="예: 정문 출입통제실, 주차장 순찰구역, CCTV 모니터링실">
                </div>
                
                <div class="form-group">
                    <label class="form-label">보안업무 내용</label>
                    <textarea name="handoverItems[${itemIndex}].taskDetails.content" class="form-control" rows="3" 
                              placeholder="예: 출입자 신분확인, 차량번호 등록, 순찰경로 점검, CCTV 모니터링, 비상상황 대응절차"></textarea>
                </div>
                
                <div class="form-group">
                    <label class="form-label">보안상 특이사항</label>
                    <textarea name="handoverItems[${itemIndex}].taskDetails.additionalInfo" class="form-control" rows="2" 
                              placeholder="예: 의심인물 출현, 보안장비 이상, 특별지시사항, 비상연락처 등"></textarea>
                </div>
                
                <div class="form-group">
                    <div class="checkbox-group">
                        <input type="checkbox" name="handoverItems[${itemIndex}].reportCompleted">
                        <label>보고 완료</label>
                    </div>
                </div>
            `;
            container.appendChild(div);
            itemIndex++;
        }
        
        // 인계사항 삭제
        function removeHandoverItem(button) {
            button.parentElement.parentElement.remove();
        }
        
        // 폼 제출 전 검증 및 로딩 상태 표시
        document.querySelector('form').addEventListener('submit', function(e) {
            const handoverItems = document.querySelectorAll('.handover-item');
            let isValid = true;
            
            console.log('폼 제출 검증 - 인계사항 개수:', handoverItems.length);
            
            // 인계사항이 없는 경우
            if (handoverItems.length === 0) {
                alert('최소 하나의 보안업무 인계사항을 추가해주세요.');
                e.preventDefault();
                return false;
            }
            
            handoverItems.forEach((item, index) => {
                const taskType = item.querySelector('select[name*="taskType"]');
                const assignedTeam = item.querySelector('select[name*="assignedTeam"]');
                const timeCategory = item.querySelector('select[name*="timeCategory"]');
                
                console.log(`보안업무 인계사항 #${index + 1} 검증:`, {
                    taskType: taskType ? taskType.value : '없음',
                    assignedTeam: assignedTeam ? assignedTeam.value : '없음',
                    timeCategory: timeCategory ? timeCategory.value : '없음'
                });
                
                if (taskType && !taskType.value) {
                    alert(`보안업무 인계사항 #${index + 1}의 보안업무 구분을 선택해주세요.`);
                    taskType.focus();
                    isValid = false;
                    return false;
                }
                
                if (assignedTeam && !assignedTeam.value) {
                    alert(`보안업무 인계사항 #${index + 1}의 담당 팀을 선택해주세요.`);
                    assignedTeam.focus();
                    isValid = false;
                    return false;
                }
                
                if (timeCategory && !timeCategory.value) {
                    alert(`보안업무 인계사항 #${index + 1}의 시간대를 선택해주세요.`);
                    timeCategory.focus();
                    isValid = false;
                    return false;
                }
            });
            
            if (!isValid) {
                e.preventDefault();
            } else {
                console.log('폼 검증 통과 - 제출 진행');
                // 로딩 상태 표시
                const submitBtn = document.querySelector('button[type="submit"]');
                const originalText = submitBtn.innerHTML;
                submitBtn.innerHTML = '<i class="fa-solid fa-spinner fa-spin me-1"></i>저장 중...';
                submitBtn.disabled = true;
                
                // 5초 후 원래 상태로 복원 (서버 응답이 늦을 경우를 대비)
                setTimeout(() => {
                    submitBtn.innerHTML = originalText;
                    submitBtn.disabled = false;
                }, 5000);
            }
        });
    </script>

<%- include('footer') %>
</body>
</html>
