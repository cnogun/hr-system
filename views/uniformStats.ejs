<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>유니폼 현황 - 인사관리 시스템</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    body {
      background-color: #f8f9fa;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      line-height: 1.6;
    }
    .page-header {
      background: white;
      padding: 20px 0;
      border-bottom: 1px solid #dee2e6;
      margin-bottom: 30px;
    }
    .status-section {
      background: white;
      border: 1px solid #dee2e6;
      border-radius: 6px;
      padding: 20px;
      margin-bottom: 20px;
    }
    .section-title {
      color: #495057;
      font-size: 1.1rem;
      font-weight: 600;
      margin-bottom: 15px;
      padding-bottom: 8px;
      border-bottom: 2px solid #e9ecef;
    }
    .status-row {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 10px 0;
      border-bottom: 1px solid #f1f3f4;
    }
    .status-row:last-child {
      border-bottom: none;
    }
    .status-label {
      color: #6c757d;
      font-weight: 500;
    }
         .status-value {
       color: #495057;
       font-weight: 600;
     }
     .size-details {
       margin-left: 20px;
       margin-top: 5px;
       margin-bottom: 10px;
     }
     .size-row {
       display: flex;
       justify-content: space-between;
       align-items: center;
       padding: 5px 0;
       font-size: 0.9rem;
     }
     .size-label {
       color: #6c757d;
       font-weight: 400;
     }
     .size-value {
       color: #6c757d;
       font-weight: 500;
     }
                       .uniform-table {
         width: 100%;
         border-collapse: collapse;
         margin-top: 15px;
         table-layout: fixed; /* 테이블 레이아웃 고정 */
       }
           .uniform-table th,
      .uniform-table td {
        border: 1px solid #dee2e6;
        padding: 4px 8px;
        text-align: center;
        vertical-align: middle;
      }
      
                           /* 총수량 컬럼 너비 조정 */
       .uniform-table th:nth-child(2),
       .uniform-table td:nth-child(2) {
         width: 8%; /* 섹션 너비에 맞춰 퍼센트로 조정 */
       }
       
               /* 사이즈 컬럼들 너비 조정 - 균일하게 */
       .uniform-table .size-header,
       .uniform-table td:nth-child(n+3) {
         width: 3%; /* 섹션 너비에 맞춰 퍼센트로 조정 */
         font-size: 0.9rem;
       }
     .uniform-table th {
       background-color: #f8f9fa;
       font-weight: 600;
       color: #495057;
     }
     .uniform-table td {
       color: #6c757d;
     }
                                                                                               .uniform-table .uniform-type {
           text-align: left;
           font-weight: 500;
           color: #495057;
           width: 15%; /* 섹션 너비에 맞춰 퍼센트로 조정 */
         }
     .uniform-table .size-header {
       background-color: #e9ecef;
       font-weight: 500;
       color: #495057;
     }
     .uniform-table .total-row {
       background-color: #f8f9fa;
       font-weight: 600;
       color: #495057;
     }
    .summary-box {
      background: #e3f2fd;
      border: 1px solid #bbdefb;
      border-radius: 6px;
      padding: 15px;
      margin: 20px 0;
    }
    .summary-title {
      color: #1976d2;
      font-weight: 700;
      font-size: 1.1rem;
      margin-bottom: 10px;
    }
    .back-button {
      color: #6c757d;
      text-decoration: none;
      font-size: 0.9rem;
    }
    .back-button:hover {
      color: #495057;
    }
  </style>
</head>
  <body>
    <%- include('header') %>
    
    <div class="page-header">
      <div class="container">
        <div class="d-flex justify-content-between align-items-center">
          <h1 class="h3 mb-0">
            <i class="fa-solid fa-tshirt me-2 text-primary"></i>
            유니폼 현황
          </h1>
        </div>
      </div>
    </div>

  <div class="container">
         <div class="row">
       <!-- 기본 현황 -->
       <div class="col-md-6">
         <div class="status-section">
           <div class="section-title">
             <i class="fa-solid fa-info-circle me-2"></i>기본 현황
           </div>
           <div class="status-row">
             <span class="status-label">전체 직원 수</span>
             <span class="status-value" id="totalEmployees">-</span>
           </div>
           <div class="status-row">
             <span class="status-label">유니폼 신청 직원 수</span>
             <span class="status-value" id="uniformEmployees">-</span>
           </div>
           <div class="status-row">
             <span class="status-label">신청률</span>
             <span class="status-value" id="uniformRate">-</span>
           </div>
         </div>
       </div>

               <!-- 부서별 유니폼 등록 현황 -->
        <div class="col-md-6">
          <div class="status-section">
            <div class="section-title">
              <i class="fa-solid fa-users me-2"></i>부서별 유니폼 등록 현황
            </div>
            <div id="departmentApplicantStats">
              <p class="text-muted text-center py-3">데이터를 불러오는 중...</p>
            </div>
          </div>
        </div>
     </div>

           <div class="row">
        <!-- 유니폼 종류별 현황 -->
        <div class="col-12">
                     <div class="status-section">
            <div class="section-title">
              <i class="fa-solid fa-list me-2"></i>유니폼 종류별 현황
            </div>
            <div id="uniformDetails">
              <p class="text-muted text-center py-3">데이터를 불러오는 중...</p>
            </div>
          </div>
        </div>
      </div>
    </div>

  <script>
    // 페이지 로드 시 데이터 가져오기
    document.addEventListener('DOMContentLoaded', function() {
      loadUniformData();
    });

    // 유니폼 데이터 로드
    function loadUniformData() {
      console.log('유니폼 데이터 로드 시작...');
      
      fetch('/uniform/stats/api')
        .then(response => {
          console.log('API 응답 상태:', response.status, response.statusText);
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          return response.json();
        })
        .then(result => {
          console.log('API 응답 데이터:', result);
          if (result.success) {
            const data = result.data;
            console.log('처리할 데이터:', data);
            console.log('데이터 키들:', Object.keys(data));
            console.log('uniformDetails 존재 여부:', !!data.uniformDetails);
            console.log('uniformDetails 값:', data.uniformDetails);
                         updateBasicStatus(data);
             updateDepartmentApplicantStats(data);
             updateUniformTypeStatus(data);
          } else {
            console.error('데이터 로드 실패:', result.message || '알 수 없는 오류');
            showError(result.message || '데이터를 불러오는 중 오류가 발생했습니다.');
          }
        })
        .catch(error => {
          console.error('API 호출 오류:', error);
          if (error.message.includes('404')) {
            showError('API 엔드포인트를 찾을 수 없습니다. 관리자에게 문의하세요.');
          } else {
            showError('서버 연결 오류가 발생했습니다. 잠시 후 다시 시도해주세요.');
          }
        });
    }

                  // 기본 현황 업데이트
      function updateBasicStatus(data) {
        document.getElementById('totalEmployees').textContent = data.totalEmployees || 0;
        document.getElementById('uniformEmployees').textContent = data.uniformEmployees || 0;
        
        const rate = data.totalEmployees > 0 ? 
          ((data.uniformEmployees / data.totalEmployees) * 100).toFixed(1) + '%' : '0%';
        document.getElementById('uniformRate').textContent = rate;
      }

                   // 부서별 유니폼 등록 현황 업데이트
      function updateDepartmentApplicantStats(data) {
        const container = document.getElementById('departmentApplicantStats');
        console.log('부서별 유니폼 등록 현황 데이터:', data.departmentStats);
        
        if (data.departmentStats && Object.keys(data.departmentStats).length > 0) {
          let html = '';
          
          // 부서별 신청자 수를 지정된 순서로 정렬
          const departmentOrder = ['보안1팀', '보안2팀', '보안3팀', '지원팀', '관리팀', '인사팀'];
          const sortedDepartments = Object.entries(data.departmentStats)
            .sort(([a], [b]) => {
              const aIndex = departmentOrder.indexOf(a);
              const bIndex = departmentOrder.indexOf(b);
              // 지정된 순서에 없는 부서는 맨 뒤로
              if (aIndex === -1 && bIndex === -1) return 0;
              if (aIndex === -1) return 1;
              if (bIndex === -1) return -1;
              return aIndex - bIndex;
            });
          
                     // 총 신청자 수 계산
           const totalApplicants = Object.values(data.departmentStats).reduce((sum, deptData) => sum + (deptData.uniform || 0), 0);
          
                     sortedDepartments.forEach(([deptName, deptData]) => {
             // 새로운 데이터 구조: deptData = { total: 총인원, uniform: 유니폼신청자수 }
             const uniformCount = deptData.uniform || 0;
             const totalCount = deptData.total || 0;
             const percentage = totalCount > 0 ? 
               ((uniformCount / totalCount) * 100).toFixed(1) : 0;
             
             html += `
               <div class="status-row">
                 <span class="status-label">${deptName}</span>
                 <span class="status-value">${uniformCount}명/${totalCount}명 (${percentage}%)</span>
               </div>
             `;
           });
          
                     // 총계 행 추가
           const totalPercentage = data.totalEmployees > 0 ? 
             ((totalApplicants / data.totalEmployees) * 100).toFixed(1) : 0;
           html += `
             <div class="status-row" style="border-top: 2px solid #dee2e6; margin-top: 10px; padding-top: 10px;">
               <span class="status-label" style="font-weight: 600; color: #495057;">총 신청자 수</span>
               <span class="status-value" style="font-weight: 700; color: #1976d2;">${totalApplicants}명/${data.totalEmployees}명 (${totalPercentage}%)</span>
             </div>
           `;
          
          container.innerHTML = html;
          console.log('부서별 유니폼 등록 현황 HTML 생성 완료:', html);
        } else {
          container.innerHTML = '<p class="text-muted text-center py-3">부서별 유니폼 등록 데이터가 없습니다.</p>';
          console.log('부서별 유니폼 등록 데이터가 없음');
        }
      }

               // 유니폼 종류별 현황 업데이트
      function updateUniformTypeStatus(data) {
        const container = document.getElementById('uniformDetails');
        console.log('유니폼 종류별 현황 데이터:', data.uniformDetails);
        console.log('사이즈별 현황 데이터:', data.sizeDetails);
        console.log('uniformDetails 타입:', typeof data.uniformDetails);
        console.log('uniformDetails 키들:', Object.keys(data.uniformDetails || {}));
        
        if (data.uniformDetails && Object.keys(data.uniformDetails).length > 0) {
          // 모든 사이즈 정보를 수집 (빈 값 제외)
          const allSizes = new Set();
          if (data.sizeDetails) {
            Object.values(data.sizeDetails).forEach(sizeData => {
              Object.keys(sizeData).forEach(size => {
                // 빈 문자열, null, undefined 값은 제외
                if (size && size !== '' && size !== null && size !== undefined) {
                  allSizes.add(size);
                }
              });
            });
          }
          
          // 모든 사이즈를 강제로 추가 (데이터가 없어도 컬럼으로 표시)
          const allRequiredSizes = [
            '3별대', '2별대', '별대', '특대', '대', '중', '소',
            '30', '31', '32', '33', '34', '35', '36', '37', '38',
            '250', '255', '260', '265', '270', '275', '280', '285', '290'
          ];
          
          allRequiredSizes.forEach(size => allSizes.add(size));
          
          // 사이즈를 지정된 순서로 정렬 (총 25개 항목)
          const sizeOrder = [
            '3별대', '2별대', '별대', '특대', '대', '중', '소',
            '30', '31', '32', '33', '34', '35', '36', '37', '38',
            '250', '255', '260', '265', '270', '275', '280', '285', '290'
          ];
          
          const sortedSizes = Array.from(allSizes).sort((a, b) => {
            const aIndex = sizeOrder.indexOf(a);
            const bIndex = sizeOrder.indexOf(b);
            
            // 지정된 순서에 없는 사이즈는 맨 뒤로
            if (aIndex === -1 && bIndex === -1) return 0;
            if (aIndex === -1) return 1;
            if (bIndex === -1) return -1;
            
            return aIndex - bIndex;
          });
          
          // 디버깅: 사이즈 정보 확인
          console.log('수집된 모든 사이즈:', Array.from(allSizes));
          console.log('정렬된 사이즈:', sortedSizes);
          
          let html = '<table class="uniform-table">';
          
          // 헤더 행
          html += '<thead><tr>';
          html += '<th class="uniform-type">유니폼 종류</th>';
          html += '<th>총 수량</th>';
          sortedSizes.forEach(size => {
            html += `<th class="size-header">${size}</th>`;
          });
          html += '</tr></thead>';
          
          // 데이터 행
          html += '<tbody>';
          Object.entries(data.uniformDetails).forEach(([uniformType, count]) => {
            console.log(`유니폼 타입: ${uniformType}, 수량: ${count}`);
            
            html += '<tr>';
            html += `<td class="uniform-type">${uniformType}</td>`;
            html += `<td>${count || 0}</td>`;
            
            // 각 사이즈별 수량
            sortedSizes.forEach(size => {
              const sizeCount = data.sizeDetails && data.sizeDetails[uniformType] && data.sizeDetails[uniformType][size] ? data.sizeDetails[uniformType][size] : 0;
              html += `<td>${sizeCount}</td>`;
            });
            
            html += '</tr>';
          });
          
          // 총계 행
          html += '<tr class="total-row">';
          html += '<td class="uniform-type"><strong>총계</strong></td>';
          
          // 총 유니폼 수량
          const totalUniforms = Object.values(data.uniformDetails).reduce((sum, count) => sum + (count || 0), 0);
          html += `<td><strong>${totalUniforms}</strong></td>`;
          
          // 각 사이즈별 총계
          sortedSizes.forEach(size => {
            let sizeTotal = 0;
            if (data.sizeDetails) {
              Object.values(data.sizeDetails).forEach(sizeData => {
                if (sizeData[size]) {
                  sizeTotal += sizeData[size];
                }
              });
            }
            html += `<td><strong>${sizeTotal}</strong></td>`;
          });
          
          html += '</tr>';
          html += '</tbody></table>';
          
          container.innerHTML = html;
          console.log('유니폼 종류별 현황 HTML 생성 완료:', html);
        } else {
          container.innerHTML = '<p class="text-muted text-center py-3">유니폼 종류별 데이터가 없습니다.</p>';
          console.log('유니폼 종류별 데이터가 없음');
        }
      }

    

    // 에러 메시지 표시
    function showError(message) {
      const container = document.querySelector('.container');
      const errorDiv = document.createElement('div');
      errorDiv.className = 'alert alert-danger';
      errorDiv.innerHTML = `
        <i class="fa-solid fa-exclamation-triangle me-2"></i>
        ${message}
      `;
      
      container.insertBefore(errorDiv, container.firstChild);
      
      setTimeout(() => {
        if (errorDiv.parentNode) {
          errorDiv.remove();
        }
      }, 5000);
    }
  </script>
  

  
  <%- include('footer') %>
</body>
</html>
