<!--
  파일명: activityLogs.ejs
  목적: 사용자 활동 로그 관리 페이지
  기능:
  - 사용자 활동 내역 표시
  - 활동 유형별 필터링
  - 날짜 범위 검색
  - 엑셀 다운로드 기능
  - 관리자 권한 검증
-->
<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>활동 로그 - 인사관리 시스템</title>
  <style>
    .log-card {
      transition: transform 0.2s, box-shadow 0.2s;
      border: none;
      border-radius: 15px;
      height: 100%;
    }
    .log-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    }
    .filter-section {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      border-radius: 15px;
      padding: 20px;
      margin-bottom: 30px;
    }
    .stats-card {
      background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
      color: white;
      border-radius: 15px;
      padding: 20px;
      margin-bottom: 20px;
    }
    .btn-filter {
      border-radius: 25px;
      font-weight: 500;
      padding: 8px 20px;
      margin: 5px;
      transition: all 0.3s;
    }
    .btn-filter:hover {
      transform: translateY(-2px);
      box-shadow: 0 5px 15px rgba(0,0,0,0.2);
    }
    .btn-filter.active {
      background: rgba(255,255,255,0.2);
      border-color: rgba(255,255,255,0.5);
    }
    .table-responsive {
      border-radius: 15px;
      overflow: hidden;
    }
    .log-level {
      padding: 4px 8px;
      border-radius: 12px;
      font-size: 0.8em;
      font-weight: 500;
    }
    .log-level.info { background: #d1ecf1; color: #0c5460; }
    .log-level.warning { background: #fff3cd; color: #856404; }
    .log-level.error { background: #f8d7da; color: #721c24; }
    .log-level.success { background: #d4edda; color: #155724; }
  </style>
</head>
<body class="bg-light">
  <%- include('header', { session: session, position: position }) %>
  
  <div class="container mt-4">
    <div class="row mb-4">
      <div class="col-12">
        <div class="d-flex justify-content-between align-items-center">
          <h1 class="h2 mb-0">
            <i class="fa-solid fa-history me-2 text-primary"></i>
            활동 로그
          </h1>
        </div>
        <p class="text-muted mt-2">사용자 활동 내역을 확인하고 관리할 수 있습니다.</p>
      </div>
    </div>

    <!-- 통계 요약 -->
    <div class="row g-4 mb-4">
      <div class="col-md-3">
        <div class="stats-card text-center">
          <i class="fa-solid fa-users fa-3x mb-3"></i>
          <h3 class="mb-2" id="totalUsers">0</h3>
          <p class="mb-0">활성 사용자</p>
        </div>
      </div>
      <div class="col-md-3">
        <div class="stats-card text-center">
          <i class="fa-solid fa-clock fa-3x mb-3"></i>
          <h3 class="mb-2" id="totalActivities">0</h3>
          <p class="mb-0">총 활동 수</p>
        </div>
      </div>
      <div class="col-md-3">
        <div class="stats-card text-center">
          <i class="fa-solid fa-calendar-day fa-3x mb-3"></i>
          <h3 class="mb-2" id="todayActivities">0</h3>
          <p class="mb-0">오늘 활동</p>
        </div>
      </div>
      <div class="col-md-3">
        <div class="stats-card text-center">
          <i class="fa-solid fa-exclamation-triangle fa-3x mb-3"></i>
          <h3 class="mb-2" id="errorCount">0</h3>
          <p class="mb-0">오류 발생</p>
        </div>
      </div>
    </div>

    <!-- 필터 섹션 -->
    <div class="filter-section">
      <h4 class="mb-3">
        <i class="fa-solid fa-filter me-2"></i>
        로그 필터
      </h4>
      
      <!-- 날짜 범위 선택 -->
      <div class="row mb-3">
        <div class="col-md-3">
          <label class="form-label">시작 날짜</label>
          <input type="date" class="form-control" id="startDate">
        </div>
        <div class="col-md-3">
          <label class="form-label">종료 날짜</label>
          <input type="date" class="form-control" id="endDate">
        </div>
        <div class="col-md-3">
          <label class="form-label">사용자</label>
          <select class="form-select" id="userFilter">
            <option value="">전체 사용자</option>
          </select>
        </div>
        <div class="col-md-3">
          <label class="form-label">활동 유형</label>
          <select class="form-select" id="activityTypeFilter">
            <option value="">전체 활동</option>
            <option value="login">로그인</option>
            <option value="logout">로그아웃</option>
            <option value="create">생성</option>
            <option value="update">수정</option>
            <option value="delete">삭제</option>
            <option value="download">다운로드</option>
            <option value="upload">업로드</option>
          </select>
        </div>
      </div>
      
      <!-- 빠른 필터 버튼 -->
      <div class="mb-3">
        <label class="form-label me-2">빠른 필터:</label>
        <button class="btn btn-filter btn-outline-light" onclick="setQuickFilter('today')">오늘</button>
        <button class="btn btn-filter btn-outline-light" onclick="setQuickFilter('week')">이번 주</button>
        <button class="btn btn-filter btn-outline-light" onclick="setQuickFilter('month')">이번 달</button>
        <button class="btn btn-filter btn-outline-light" onclick="setQuickFilter('year')">올해</button>
      </div>
      
      <!-- 검색 및 필터 적용 -->
      <div class="d-flex gap-2">
        <button class="btn btn-light" onclick="applyFilters()">
          <i class="fa-solid fa-search me-2"></i>필터 적용
        </button>
        <button class="btn btn-outline-light" onclick="resetFilters()">
          <i class="fa-solid fa-undo me-2"></i>초기화
        </button>
      </div>
    </div>

    <!-- 활동 로그 테이블 -->
    <div class="card log-card">
      <div class="card-header bg-dark text-white">
        <div class="d-flex justify-content-between align-items-center">
          <h5 class="mb-0">
            <i class="fa-solid fa-list me-2"></i>
            활동 로그 목록
          </h5>
          <div class="d-flex align-items-center gap-2">
            <span class="badge bg-light text-dark" id="logCount">0</span>
            <small>개 항목</small>
          </div>
        </div>
      </div>
      <div class="card-body">
        <div class="table-responsive">
          <table class="table table-hover" id="activityTable">
            <thead class="table-dark">
              <tr>
                <th>시간</th>
                <th>사용자</th>
                <th>활동</th>
                <th>상세 내용</th>
                <th>IP 주소</th>
                <th>상태</th>
              </tr>
            </thead>
            <tbody id="activityTableBody">
              <!-- 데이터가 동적으로 로드됨 -->
            </tbody>
          </table>
        </div>
        
        <!-- 페이지네이션 -->
        <nav aria-label="활동 로그 페이지네이션" class="mt-4">
          <ul class="pagination justify-content-center" id="pagination">
            <!-- 페이지네이션이 동적으로 생성됨 -->
          </ul>
        </nav>
      </div>
    </div>
  </div>

  <script>
    let currentPage = 1;
    let totalPages = 1;
    let currentFilters = {};

    // 페이지 로드 시 초기화
    document.addEventListener('DOMContentLoaded', function() {
      initializePage();
      // 서버에서 전달된 초기 데이터 사용
      updateActivityTable(<%- JSON.stringify(logs) %>);
      document.getElementById('logCount').textContent = <%- logs ? logs.length : 0 %>;
    });

    // 페이지 초기화
    function initializePage() {
      // 오늘 날짜를 기본값으로 설정
      const today = new Date();
      const oneWeekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);
      
      document.getElementById('startDate').value = oneWeekAgo.toISOString().split('T')[0];
      document.getElementById('endDate').value = today.toISOString().split('T')[0];
      
      // 사용자 목록 로드
      loadUserList();
      
      // 이벤트 리스너 등록
      document.getElementById('startDate').addEventListener('change', applyFilters);
      document.getElementById('endDate').addEventListener('change', applyFilters);
      document.getElementById('userFilter').addEventListener('change', applyFilters);
      document.getElementById('activityTypeFilter').addEventListener('change', applyFilters);
    }

    // 사용자 목록 로드
    async function loadUserList() {
      try {
        const response = await fetch('/auth/users');
        const result = await response.json();
        
        if (result.success) {
          const userSelect = document.getElementById('userFilter');
          result.data.forEach(user => {
            const option = document.createElement('option');
            option.value = user.userId;
            option.textContent = user.name || user.userId;
            userSelect.appendChild(option);
          });
        }
      } catch (error) {
        console.error('사용자 목록 로드 오류:', error);
      }
    }

    // 활동 로그 로드
    async function loadActivityLogs(page = 1) {
      try {
        const filters = getCurrentFilters();
        const queryParams = new URLSearchParams({
          page: page,
          limit: 20,
          ...filters
        });

        const response = await fetch(`/auth/logs/api?${queryParams}`);
        const result = await response.json();
        
        if (result.success) {
          updateActivityTable(result.data.logs);
          updatePagination(result.data.pagination.totalPages, page);
          updateStats(result.data.stats);
        } else {
          console.error('활동 로그 로드 실패:', result.error);
          showError('활동 로그를 불러오는 중 오류가 발생했습니다.');
        }
      } catch (error) {
        console.error('활동 로그 로드 오류:', error);
      }
    }

    // 현재 필터 가져오기
    function getCurrentFilters() {
      return {
        startDate: document.getElementById('startDate').value,
        endDate: document.getElementById('endDate').value,
        userId: document.getElementById('userFilter').value,
        activityType: document.getElementById('activityTypeFilter').value
      };
    }

    // 필터 적용
    function applyFilters() {
      currentPage = 1;
      loadActivityLogs(currentPage);
    }

    // 필터 초기화
    function resetFilters() {
      document.getElementById('startDate').value = '';
      document.getElementById('endDate').value = '';
      document.getElementById('userFilter').value = '';
      document.getElementById('activityTypeFilter').value = '';
      
      // 빠른 필터 버튼 비활성화
      document.querySelectorAll('.btn-filter').forEach(btn => btn.classList.remove('active'));
      
      applyFilters();
    }

    // 빠른 필터 설정
    function setQuickFilter(period) {
      const today = new Date();
      let startDate = new Date();
      
      switch(period) {
        case 'today':
          startDate = today;
          break;
        case 'week':
          startDate.setDate(today.getDate() - 7);
          break;
        case 'month':
          startDate.setMonth(today.getMonth() - 1);
          break;
        case 'year':
          startDate.setFullYear(today.getFullYear() - 1);
          break;
      }
      
      document.getElementById('startDate').value = startDate.toISOString().split('T')[0];
      document.getElementById('endDate').value = today.toISOString().split('T')[0];
      
      // 빠른 필터 버튼 활성화
      document.querySelectorAll('.btn-filter').forEach(btn => btn.classList.remove('active'));
      event.target.classList.add('active');
      
      applyFilters();
    }

    // 시간을 한국 시간으로 변환하는 함수
    function convertToKoreaTime(dateString) {
      try {
        const date = new Date(dateString);
        

        
        // 기존 데이터가 이미 한국 시간으로 저장되어 있으므로 그대로 사용
        // 단순히 포맷팅만 수행
        // 기존 데이터가 이미 한국 시간으로 저장되어 있지만 9시간이 더해진 상태
        // 9시간을 빼서 정확한 한국 시간으로 변환
        const correctedDate = new Date(date.getTime() - (9 * 60 * 60 * 1000));
        
        const year = correctedDate.getFullYear();
        const month = String(correctedDate.getMonth() + 1).padStart(2, '0');
        const day = String(correctedDate.getDate()).padStart(2, '0');
        const hours = String(correctedDate.getHours()).padStart(2, '0');
        const minutes = String(correctedDate.getMinutes()).padStart(2, '0');
        const seconds = String(correctedDate.getSeconds()).padStart(2, '0');
        
        return `${year}. ${month}. ${day}. ${hours}:${minutes}:${seconds}`;
      } catch (error) {
        console.error('시간 변환 오류:', error);
        return dateString;
      }
    }

    // 활동 로그 테이블 업데이트
    function updateActivityTable(logs) {
      const tbody = document.getElementById('activityTableBody');
      tbody.innerHTML = '';
      
      if (logs && logs.length > 0) {
        logs.forEach(log => {
          const row = document.createElement('tr');
          row.innerHTML = `
            <td>${convertToKoreaTime(log.createdAt)}</td>
            <td>
              <strong>${log.userId?.username || '알 수 없음'}</strong>
              <br>
              <small class="text-muted">사용자</small>
            </td>
            <td>
              <span class="badge bg-primary">${getActivityTypeText(log.action)}</span>
            </td>
            <td>${log.detail || '-'}</td>
            <td>
              <code>${log.ip || '-'}</code>
            </td>
            <td>
              <span class="log-level info">
                정보
              </span>
            </td>
          `;
          tbody.appendChild(row);
        });
      } else {
        tbody.innerHTML = `
          <tr>
            <td colspan="6" class="text-center text-muted py-4">
              <i class="fa-solid fa-inbox fa-2x mb-3"></i>
              <br>활동 로그가 없습니다.
            </td>
          </tr>
        `;
      }
      
      document.getElementById('logCount').textContent = logs ? logs.length : 0;
    }

    // 통계 업데이트
    function updateStats(stats) {
      if (stats) {
        document.getElementById('totalUsers').textContent = stats.totalUsers || 0;
        document.getElementById('todayLogs').textContent = stats.todayLogs || 0;
        document.getElementById('totalLogs').textContent = stats.totalLogs || 0;
      }
    }

    // 페이지네이션 업데이트
    function updatePagination(totalPages, currentPage) {
      const pagination = document.getElementById('pagination');
      pagination.innerHTML = '';
      
      if (totalPages <= 1) return;
      
      // 이전 페이지 버튼
      if (currentPage > 1) {
        const prevLi = document.createElement('li');
        prevLi.className = 'page-item';
        prevLi.innerHTML = `<a class="page-link" href="#" onclick="changePage(${currentPage - 1})">이전</a>`;
        pagination.appendChild(prevLi);
      }
      
      // 페이지 번호
      for (let i = 1; i <= totalPages; i++) {
        if (i === 1 || i === totalPages || (i >= currentPage - 2 && i <= currentPage + 2)) {
          const li = document.createElement('li');
          li.className = `page-item ${i === currentPage ? 'active' : ''}`;
          li.innerHTML = `<a class="page-link" href="#" onclick="changePage(${i})">${i}</a>`;
          pagination.appendChild(li);
        } else if (i === currentPage - 3 || i === currentPage + 3) {
          const li = document.createElement('li');
          li.className = 'page-item disabled';
          li.innerHTML = '<span class="page-link">...</span>';
          pagination.appendChild(li);
        }
      }
      
      // 다음 페이지 버튼
      if (currentPage < totalPages) {
        const nextLi = document.createElement('li');
        nextLi.className = 'page-item';
        nextLi.innerHTML = `<a class="page-link" href="#" onclick="changePage(${currentPage + 1})">다음</a>`;
        pagination.appendChild(nextLi);
      }
    }

    // 페이지 변경
    function changePage(page) {
      currentPage = page;
      loadActivityLogs(page);
    }

    // 통계 업데이트
    function updateStats(stats) {
      if (stats) {
        document.getElementById('totalUsers').textContent = stats.uniqueUsers || 0;
        document.getElementById('totalActivities').textContent = stats.totalActions || 0;
        document.getElementById('todayActivities').textContent = stats.totalActions || 0;
        document.getElementById('errorCount').textContent = stats.actionTypes?.length || 0;
      }
    }

    // 활동 유형 텍스트 변환
    function getActivityTypeText(type) {
      const typeMap = {
        'login': '로그인',
        'logout': '로그아웃',
        'create': '생성',
        'update': '수정',
        'delete': '삭제',
        'download': '다운로드',
        'upload': '업로드'
      };
      return typeMap[type] || type;
    }

    // 로그 레벨 텍스트 변환
    function getLogLevelText(level) {
      const levelMap = {
        'info': '정보',
        'warning': '경고',
        'error': '오류',
        'success': '성공'
      };
      return levelMap[level] || level;
    }

    // 에러 표시 함수
    function showError(message) {
      // 기존 에러 메시지 제거
      const existingError = document.querySelector('.alert-danger');
      if (existingError) {
        existingError.remove();
      }
      
      // 새 에러 메시지 생성
      const errorDiv = document.createElement('div');
      errorDiv.className = 'alert alert-danger alert-dismissible fade show';
      errorDiv.innerHTML = `
        <i class="fa-solid fa-exclamation-triangle me-2"></i>
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
      `;
      
      // 페이지 상단에 에러 메시지 삽입
      const container = document.querySelector('.container');
      container.insertBefore(errorDiv, container.firstChild);
      
          // 5초 후 자동 제거
    setTimeout(() => {
      if (errorDiv.parentNode) {
        errorDiv.remove();
      }
    }, 5000);
  }



  </script>
  

  
  <%- include('footer') %>
</body>
</html>
