<%- include('header') %>

<div class="container mt-4">
  <div class="row">
    <div class="col-12">
      <!-- 페이지 헤더 -->
      <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
          <h2 class="mb-1">
            <i class="fa-solid fa-clock me-2 text-primary"></i>근태 관리
          </h2>
          <p class="text-muted mb-0">직원들의 일일 근태를 입력하고 관리합니다.</p>
        </div>
        <div class="d-flex gap-2">
          <div class="d-flex align-items-center gap-2">
            <input type="date" id="attendanceDate" class="form-control" value="<%= today %>">
            <span id="selectedDayOfWeek" class="badge bg-secondary fs-6 px-3 py-2"></span>
          </div>
          <button class="btn btn-primary" onclick="loadAttendanceData()">
            <i class="fa-solid fa-search me-1"></i>조회
          </button>
          <button class="btn btn-info" onclick="autoSetAttendance()">
            <i class="fa-solid fa-robot me-1"></i>근태 자동 입력
          </button>
        </div>
        </div>

        <!-- 부서별 필터 -->
        <div class="card shadow-sm mb-4">
          <div class="card-body">
            <form method="GET" class="row g-3 align-items-center">
              <div class="col-auto">
                <label for="departmentFilter" class="form-label fw-bold">부서 선택:</label>
              </div>
              <div class="col-auto">
                <select name="department" id="departmentFilter" class="form-select" onchange="this.form.submit()">
                  <option value="">전체 부서</option>
                  <% if (allDepartments && allDepartments.length > 0) { %>
                    <% allDepartments.forEach(dept => { %>
                      <option value="<%= dept %>" <%= dept === selectedDepartment ? 'selected' : '' %>><%= dept %></option>
                    <% }); %>
                  <% } %>
                </select>
              </div>
              <div class="col-auto">
                <button type="submit" class="btn btn-outline-primary">
                  <i class="fa-solid fa-filter me-1"></i>필터 적용
                </button>
              </div>
            </form>
        </div>
      </div>

      <!-- 근태 입력 폼 -->
      <div class="card shadow-sm">
        <div class="card-header bg-primary text-white">
          <h5 class="mb-0">
            <i class="fa-solid fa-edit me-2"></i>근태 입력
          </h5>
        </div>
        <div class="card-body p-0">
          <form id="attendanceForm">
            <div class="table-responsive">
              <table class="table table-hover mb-0">
                <thead class="table-light">
                  <tr>
                      <th style="width: 100px;">이름</th>
                      <th style="width: 80px;">부서</th>
                      <th style="width: 80px;">직급</th>
                      <th style="width: 130px;">근태 상태</th>
                      <th style="width: 80px;">출근 시간</th>
                      <th style="width: 80px;">퇴근 시간</th>
                      <th style="width: 70px;">기본</th>
                      <th style="width: 70px;">연장</th>
                      <th style="width: 70px;">특근</th>
                      <th style="width: 70px;">특연</th>
                      <th style="width: 70px;">야간</th>
                      <th style="width: 80px;">총시간</th>
                      <th style="width: 200px;">비고</th>
                  </tr>
                </thead>
                <tbody>
                  <% employees.forEach(function(employee) { %>
                  <tr>
                    <td class="align-middle">
                          <strong>
                            <%= employee.name %>
                          </strong>
                    </td>
                    <td class="align-middle">
                          <span class="badge bg-secondary">
                            <%= employee.department || '부서미정' %>
                          </span>
                    </td>
                    <td class="align-middle">
                          <span class="badge bg-info">
                            <%= employee.position || '직급미정' %>
                          </span>
                    </td>
                    <td class="align-middle">
                          <select class="form-select form-select-sm" name="<%= employee._id %>_status"
                            onchange="toggleTimeInputs('<%= employee._id %>')">
                        <option value="">선택</option>
                            <option value="출근(주)">출근(주)</option>
                            <option value="출근(초)">출근(초)</option>
                            <option value="출근(심)">출근(심)</option>
                            <option value="출근(주특)">출근(주특)</option>
                            <option value="출근(야특)">출근(야특)</option>
                            <option value="출근(사무)">출근(사무)</option>
                            <option value="정기휴무">정기휴무</option>
                            <option value="월차휴가">월차휴가</option>
                            <option value="연차휴가">연차휴가</option>
                            <option value="지각">지각</option>
                            <option value="조퇴">조퇴</option>
                            <option value="반차">반차</option>
                        <option value="병가">병가</option>
                            <option value="산재">산재</option>
                        <option value="출장">출장</option>
                        <option value="결근">결근</option>
                      </select>
                    </td>
                    <td class="align-middle">
                          <input type="time" class="form-control form-control-sm" name="<%= employee._id %>_checkIn"
                            onchange="calculateNightTime('<%= employee._id %>')" disabled>
                        </td>
                        <td class="align-middle">
                          <input type="time" class="form-control form-control-sm" name="<%= employee._id %>_checkOut"
                            onchange="calculateNightTime('<%= employee._id %>')" disabled>
                        </td>
                        <td class="align-middle">
                          <input type="number" class="form-control form-control-sm time-input"
                            name="<%= employee._id %>_basic" placeholder="0" min="0" step="0.5"
                            onchange="calculateTotalTime('<%= employee._id %>')" disabled>
                        </td>
                        <td class="align-middle">
                          <input type="number" class="form-control form-control-sm time-input"
                            name="<%= employee._id %>_overtime" placeholder="0" min="0" step="0.5"
                            onchange="calculateTotalTime('<%= employee._id %>')" disabled>
                        </td>
                        <td class="align-middle">
                          <input type="number" class="form-control form-control-sm time-input"
                            name="<%= employee._id %>_special" placeholder="0" min="0" step="0.5"
                            onchange="calculateTotalTime('<%= employee._id %>')" disabled>
                        </td>
                        <td class="align-middle">
                          <input type="number" class="form-control form-control-sm time-input"
                            name="<%= employee._id %>_specialOvertime" placeholder="0" min="0" step="0.5"
                            onchange="calculateTotalTime('<%= employee._id %>')" disabled>
                        </td>
                        <td class="align-middle">
                          <input type="number" class="form-control form-control-sm time-input"
                            name="<%= employee._id %>_night" placeholder="0" min="0" step="0.5"
                            onchange="calculateTotalTime('<%= employee._id %>')" disabled>
                    </td>
                    <td class="align-middle">
                          <input type="number" class="form-control form-control-sm" name="<%= employee._id %>_totalTime"
                            placeholder="0" min="0" step="0.5" readonly style="background-color: #f8f9fa;">
                    </td>
                    <td class="align-middle">
                          <input type="text" class="form-control form-control-sm" name="<%= employee._id %>_note"
                            placeholder="" style="min-width: 180px; font-size: 0.875rem;">
                    </td>
                  </tr>
                  <% }); %>
                </tbody>
              </table>
            </div>
          </form>
        </div>
        <div class="card-footer">
          <div class="d-flex justify-content-between align-items-center">
            <div class="text-muted">
                <small>총 <strong>
                    <%= employees.length %>
                  </strong>명의 직원</small>
            </div>
            <div class="d-flex gap-2">
              <button class="btn btn-outline-secondary" onclick="resetForm()">
                <i class="fa-solid fa-undo me-1"></i>초기화
              </button>
              <button class="btn btn-success" onclick="saveAttendance()">
                <i class="fa-solid fa-save me-1"></i>저장
              </button>
            </div>
          </div>
        </div>
      </div>

      <!-- 저장 결과 알림 -->
      <div id="saveResult" class="alert mt-3" style="display: none;"></div>
    </div>
  </div>
</div>

<script>
    // 근태 상태에 따라 시간 입력 필드 활성화/비활성화 및 기본값 설정
function toggleTimeInputs(employeeId) {
  // employeeId 유효성 검사 추가
  if (!employeeId || typeof employeeId !== 'string') {
    console.error('toggleTimeInputs: 유효하지 않은 employeeId:', employeeId);
    return;
  }
  
  console.log('toggleTimeInputs 호출됨, employeeId:', employeeId);
  
  const statusSelect = document.querySelector(`select[name="${employeeId}_status"]`);
  const checkInInput = document.querySelector(`input[name="${employeeId}_checkIn"]`);
  const checkOutInput = document.querySelector(`input[name="${employeeId}_checkOut"]`);
  
  // CSS 선택자 오류 방지를 위한 안전한 쿼리
  let timeInputs = [];
  try {
    timeInputs = document.querySelectorAll(`input[name^="${employeeId}_"][class*="time-input"]`);
  } catch (error) {
    console.error('timeInputs 쿼리 오류:', error);
    timeInputs = [];
  }
  
  const basicInput = document.querySelector(`input[name="${employeeId}_basic"]`);
  const specialInput = document.querySelector(`input[name="${employeeId}_special"]`);
  const specialOvertimeInput = document.querySelector(`input[name="${employeeId}_specialOvertime"]`);
  const nightInput = document.querySelector(`input[name="${employeeId}_night"]`);

      // 모든 시간 입력 필드 초기화
      checkInInput.value = '';
      checkOutInput.value = '';
      timeInputs.forEach(input => input.value = '');
      
      // 각 근태 상태별 처리
      switch (statusSelect.value) {
        case '출근(주)':
          checkInInput.disabled = false;
          checkOutInput.disabled = false;
          timeInputs.forEach(input => input.disabled = false);
          checkInInput.value = '06:00';
          checkOutInput.value = '14:00';
          if (basicInput) basicInput.value = '8';
          break;
          
        case '출근(초)':
          checkInInput.disabled = false;
          checkOutInput.disabled = false;
          timeInputs.forEach(input => input.disabled = false);
          checkInInput.value = '14:00';
          checkOutInput.value = '22:00';
          if (basicInput) basicInput.value = '8';
          break;
          
        case '출근(심)':
          checkInInput.disabled = false;
          checkOutInput.disabled = false;
          timeInputs.forEach(input => input.disabled = false);
          checkInInput.value = '22:00';
          checkOutInput.value = '06:00';
          if (basicInput) basicInput.value = '8';
          if (nightInput) {
            nightInput.value = '8';
            console.log('출근(심) 상태에서 야간시간 즉시 설정: 8시간');
          }
          // 심야 근무시 야간시간 강제 설정 (이중 보장)
          setTimeout(() => {
            if (nightInput) {
              nightInput.value = '8';
              console.log('출근(심) 상태에서 야간시간 강제 설정: 8시간');
            }
            calculateTotalTime(employeeId);
          }, 100);
          
          // 추가 강제 설정 (500ms 후)
          setTimeout(() => {
            if (nightInput) {
              nightInput.value = '8';
              console.log('출근(심) 상태에서 야간시간 추가 강제 설정: 8시간');
            }
            calculateTotalTime(employeeId);
          }, 500);
          break;
          
        case '출근(사무)':
          checkInInput.disabled = false;
          checkOutInput.disabled = false;
          timeInputs.forEach(input => input.disabled = false);
          checkInInput.value = '06:00';
          checkOutInput.value = '18:00';
          if (basicInput) basicInput.value = '12';
          break;
          
        case '출근(주특)':
          checkInInput.disabled = false;
          checkOutInput.disabled = false;
          timeInputs.forEach(input => input.disabled = false);
          checkInInput.value = '06:00';
          checkOutInput.value = '18:00';
          if (basicInput) basicInput.value = '8';
          if (specialInput) specialInput.value = '8';
          if (specialOvertimeInput) specialOvertimeInput.value = '4';
          break;
          
        case '출근(야특)':
          checkInInput.disabled = false;
          checkOutInput.disabled = false;
          timeInputs.forEach(input => input.disabled = false);
          checkInInput.value = '18:00';
          checkOutInput.value = '06:00';
          if (basicInput) basicInput.value = '8';
          if (specialInput) specialInput.value = '8';
          if (specialOvertimeInput) specialOvertimeInput.value = '4';
          if (nightInput) nightInput.value = '8';
          // 주말 야간 근무시 야간시간 강제 설정
          setTimeout(() => {
            if (nightInput) {
              nightInput.value = '8';
              console.log('출근(야특) 상태에서 야간시간 강제 설정: 8시간');
            }
            calculateTotalTime(employeeId);
          }, 100);
          break;

        case '월차휴가':
        case '연차휴가':
        case '병가':
          checkInInput.disabled = true;
          checkOutInput.disabled = true;
          timeInputs.forEach(input => input.disabled = true);
          if (basicInput) {
            basicInput.disabled = false;
            basicInput.value = '8';
          }
          break;

        case '반차':
          checkInInput.disabled = false;
          checkOutInput.disabled = false;
          timeInputs.forEach(input => input.disabled = true);
          if (basicInput) {
            basicInput.disabled = false;
            basicInput.value = '4';
          }
          if (nightInput) nightInput.disabled = false;
          break;
          
        case '지각':
        case '조퇴':
    checkInInput.disabled = false;
    checkOutInput.disabled = false;
          timeInputs.forEach(input => input.disabled = false);
          break;
          
        default:
          // 산재, 출장, 결근 등
    checkInInput.disabled = true;
    checkOutInput.disabled = true;
          timeInputs.forEach(input => input.disabled = true);
          break;
      }
      
      // 야간시간 자동 계산 (강제 실행) - 심야 근무시에는 야간시간 계산 건너뛰기
      setTimeout(() => {
        console.log('근태 상태 변경 후 야간시간 계산 실행');
        // 심야 근무 상태인 경우 야간시간은 이미 설정되어 있으므로 건너뛰기
        const statusSelect = document.querySelector(`select[name="${employeeId}_status"]`);
        if (statusSelect && statusSelect.value === '출근(심)') {
          console.log('출근(심) 상태: 야간시간 계산 건너뛰고 총시간만 계산');
          calculateTotalTime(employeeId);
        } else {
          calculateNightTime(employeeId);
          calculateTotalTime(employeeId);
        }
      }, 500);
    }

    // 총시간 자동 계산
    function calculateTotalTime(employeeId) {
      const basic = parseFloat(document.querySelector(`input[name="${employeeId}_basic"]`).value) || 0;
      const overtime = parseFloat(document.querySelector(`input[name="${employeeId}_overtime"]`).value) || 0;
      const special = parseFloat(document.querySelector(`input[name="${employeeId}_special"]`).value) || 0;
      const specialOvertime = parseFloat(document.querySelector(`input[name="${employeeId}_specialOvertime"]`).value) || 0;
      const night = parseFloat(document.querySelector(`input[name="${employeeId}_night"]`).value) || 0;
      
      // 총시간 계산: 기본+연장*1.5+특근*1.5+특연*2+야간수당(야간*0.5)
      // 야간수당: 야간시간(8시간) × 0.5 = 4시간
      // 주말 근무: 기본(8) + 특근(12) + 특연(8) + 야간수당(4) = 8 + 12 + 8 + 4 = 32시간
      const totalTime = basic + (overtime * 1.5) + (special * 1.5) + (specialOvertime * 2) + (night * 0.5);
      
      const totalInput = document.querySelector(`input[name="${employeeId}_totalTime"]`);
      if (totalInput) {
        totalInput.value = Math.floor(totalTime);
      }
    }

    // 야간시간 자동 계산 (22:00~06:00)
    function calculateNightTime(employeeId) {
      const checkInInput = document.querySelector(`input[name="${employeeId}_checkIn"]`);
      const checkOutInput = document.querySelector(`input[name="${employeeId}_checkOut"]`);
      const nightInput = document.querySelector(`input[name="${employeeId}_night"]`);
      
      if (!checkInInput || !checkOutInput || !nightInput) return;
      
      const checkIn = checkInInput.value;
      const checkOut = checkOutInput.value;
      
      if (!checkIn || !checkOut) return;
      
      // 야간시간 계산 (22:00~06:00)
      const [checkInHour, checkInMin] = checkIn.split(':').map(Number);
      const [checkOutHour, checkOutMin] = checkOut.split(':').map(Number);
      
      let nightTime = 0;
      
      console.log(`야간시간 계산 - 직원ID: ${employeeId}, 출근: ${checkInHour}:${checkInMin}, 퇴근: ${checkOutHour}:${checkOutMin}`);
      console.log(`파싱된 시간 - 출근시간: ${checkInHour}시, 퇴근시간: ${checkOutHour}시`);
      
      // 야간 근무 감지 (22:00~06:00)
      if (checkInHour >= 18 && checkOutHour <= 6) {
        // 야간 특근: 18:00~06:00 (다음날) - 야간시간 8시간 고정
        nightTime = 8;
        console.log('야간 특근 감지: 야간시간 8시간으로 설정');
      } else if (checkInHour >= 22 && checkOutHour <= 6) {
        // 심야 정상근무: 22:00~06:00 - 야간시간 8시간 고정
        nightTime = 8;
        console.log('심야 근무 감지: 야간시간 8시간으로 설정');
      } else if (checkInHour >= 22 || checkOutHour <= 6) {
        // 22:00~06:00 구간에 해당하는 경우 - 야간시간 8시간 고정
        nightTime = 8;
        console.log('일반 야간시간: 야간시간 8시간으로 설정');
      } else if (checkInHour >= 18 && checkOutHour <= 23) {
        // 18:00~23:59 구간 (야간 특근의 시작 부분) - 야간시간 8시간 고정
        nightTime = 8;
        console.log('야간 특근 시작 부분 감지: 야간시간 8시간으로 설정');
      }
      
      console.log(`최종 야간시간: ${nightTime}시간 (야간수당 ${nightTime * 0.5}시간)`);
      nightInput.value = nightTime;
      
      // 총시간 재계산
      calculateTotalTime(employeeId);
    }

    // 모든 필드 초기화
    function clearAllFields() {
      // 모든 시간 입력 필드 비활성화 및 초기화
      const timeInputs = document.querySelectorAll('input[type="time"], input[class*="time-input"]');
      timeInputs.forEach(input => {
        input.disabled = true;
        input.value = '';
      });

      // 총시간 필드 초기화
      const totalInputs = document.querySelectorAll('input[name$="_totalTime"]');
      totalInputs.forEach(input => {
        input.value = '';
      });

      // 상태 선택 초기화
      const statusSelects = document.querySelectorAll('select[name$="_status"]');
      statusSelects.forEach(select => {
        select.value = '';
      });

      // 비고 필드 초기화
      const noteInputs = document.querySelectorAll('input[name$="_note"]');
      noteInputs.forEach(input => {
        input.value = '';
      });
    }

    // 폼 초기화
    function resetForm() {
      if (confirm('모든 입력 내용을 초기화하시겠습니까?')) {
        document.getElementById('attendanceForm').reset();
        clearAllFields();
      }
    }

// 근태 데이터 저장
async function saveAttendance() {
  try {
    const date = document.getElementById('attendanceDate').value;
    const form = document.getElementById('attendanceForm');
    const formData = new FormData(form);
    
    const attendanceData = {};
    
    // 폼 데이터를 구조화된 객체로 변환
    for (const [key, value] of formData.entries()) {
      const [employeeId, field] = key.split('_');
      
      if (!attendanceData[employeeId]) {
        attendanceData[employeeId] = {};
      }
      
          attendanceData[employeeId][field] = value;
    }
    
    // API 호출
    const response = await fetch('/attendance/save', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        date: date,
        attendanceData: attendanceData
      })
    });
    
    const result = await response.json();
    
    // 결과 표시
    const resultDiv = document.getElementById('saveResult');
    resultDiv.style.display = 'block';
    
    if (result.success) {
      resultDiv.className = 'alert alert-success mt-3';
      resultDiv.innerHTML = `
        <i class="fa-solid fa-check-circle me-2"></i>
        ${result.message}
      `;
    } else {
      resultDiv.className = 'alert alert-danger mt-3';
      resultDiv.innerHTML = `
        <i class="fa-solid fa-exclamation-triangle me-2"></i>
        ${result.message}
      `;
    }
    
    // 3초 후 알림 숨기기
    setTimeout(() => {
      resultDiv.style.display = 'none';
    }, 3000);
    
  } catch (error) {
    console.error('근태 저장 오류:', error);
    alert('근태 저장 중 오류가 발생했습니다.');
  }
}

// 특정 날짜의 근태 데이터 조회
async function loadAttendanceData() {
  try {
    const date = document.getElementById('attendanceDate').value;
    
        // 현재 선택된 부서 정보 가져오기
        const departmentFilter = document.getElementById('departmentFilter');
        const selectedDepartment = departmentFilter ? departmentFilter.value : '';
        
        // 부서 정보를 포함하여 데이터 조회
        let url = `/attendance/data/${date}`;
        if (selectedDepartment) {
          url += `?department=${encodeURIComponent(selectedDepartment)}`;
        }
        
        const response = await fetch(url);
    const result = await response.json();
    
    if (result.success) {
          // 모든 필드를 먼저 초기화
          clearAllFields();
          
      // 기존 데이터로 폼 채우기
      const data = result.data;
          
      console.log('조회된 데이터:', data);
      
      for (const employeeId in data) {
        const attendance = data[employeeId];
            
        console.log(`직원 ${employeeId}의 근태 데이터:`, attendance);
        
        if (attendance.status) {
          // 상태 선택
          const statusSelect = document.querySelector(`select[name="${employeeId}_status"]`);
          if (statusSelect) {
            statusSelect.value = attendance.status;
                
            // 모든 상태에 대해 toggleTimeInputs 호출하여 기본값 설정
            toggleTimeInputs(employeeId);
                
            // 기존 데이터가 있는 경우 해당 값으로 설정
            if (attendance.checkIn) {
              const checkInInput = document.querySelector(`input[name="${employeeId}_checkIn"]`);
              if (checkInInput) checkInInput.value = attendance.checkIn;
            }
                
            if (attendance.checkOut) {
              const checkOutInput = document.querySelector(`input[name="${employeeId}_checkOut"]`);
              if (checkOutInput) checkOutInput.value = attendance.checkOut;
            }
                
            // 시간 입력 필드들 - MongoDB Map 타입 데이터 처리
            const timeFields = ['basic', 'overtime', 'special', 'specialOvertime', 'night'];
            timeFields.forEach(field => {
              const input = document.querySelector(`input[name="${employeeId}_${field}"]`);
              if (input && attendance[field] !== undefined && attendance[field] !== null && attendance[field] !== '') {
                input.value = attendance[field];
              }
            });
                
            // 총시간 재계산
            calculateTotalTime(employeeId);
          }
          
              // 비고
          const noteInput = document.querySelector(`input[name="${employeeId}_note"]`);
              if (noteInput && attendance.note) {
                noteInput.value = attendance.note;
          }
        }
      }
      
      // 성공 메시지 표시
      const resultDiv = document.getElementById('saveResult');
      resultDiv.style.display = 'block';
      resultDiv.className = 'alert alert-info mt-3';
      resultDiv.innerHTML = `
        <i class="fa-solid fa-info-circle me-2"></i>
        ${date} 근태 데이터를 불러왔습니다.
      `;
      
      setTimeout(() => {
        resultDiv.style.display = 'none';
      }, 3000);
      
    } else {
      alert('근태 데이터 조회에 실패했습니다.');
    }
    
  } catch (error) {
    console.error('근태 데이터 조회 오류:', error);
    alert('근태 데이터 조회 중 오류가 발생했습니다.');
  }
}

    // 근태 자동 입력 함수
    async function autoSetAttendance() {
      try {
        const date = document.getElementById('attendanceDate').value;
        
        if (!date) {
          alert('날짜를 선택해주세요.');
          return;
        }
        
        if (!confirm('선택한 날짜의 근태를 자동으로 입력하시겠습니까?\n\n근무 스케줄에 따라 자동으로 설정됩니다.')) {
          return;
        }
        
        // 현재 선택된 부서 정보 가져오기
        const selectedDepartment = document.getElementById('departmentFilter').value;
        
        // 근태 자동 입력 API 호출
        const response = await fetch('/attendance/auto-attendance', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ 
            date: date,
            department: selectedDepartment 
          })
        });
        
        const result = await response.json();
        
        if (result.success) {
          // 성공 시 폼에 자동 입력된 데이터 적용
          applyAutoAttendanceData(result.data);
          
          // 성공 메시지 표시
          const resultDiv = document.getElementById('saveResult');
          resultDiv.style.display = 'block';
          resultDiv.className = 'alert alert-success mt-3';
          resultDiv.innerHTML = `
            <i class="fa-solid fa-check-circle me-2"></i>
            ${date} 근태가 자동으로 입력되었습니다.
          `;
          
          setTimeout(() => {
            resultDiv.style.display = 'none';
          }, 3000);
          
        } else {
          alert('근태 자동 입력에 실패했습니다: ' + result.message);
        }
        
      } catch (error) {
        console.error('근태 자동 입력 오류:', error);
        alert('근태 자동 입력 중 오류가 발생했습니다.');
      }
    }
    
    // 자동 입력된 근태 데이터를 폼에 적용
    function applyAutoAttendanceData(attendanceData) {
      console.log('자동입력 데이터 적용 시작:', attendanceData);
      
      // 현재 화면에 표시된 직원들의 ID 목록 가져오기
      const currentEmployeeIds = [];
      const statusSelects = document.querySelectorAll('select[name$="_status"]');
      console.log('찾은 상태 선택 요소들:', statusSelects.length, '개');
      
      statusSelects.forEach(select => {
        const name = select.getAttribute('name');
        const employeeId = name.replace('_status', '');
        currentEmployeeIds.push(employeeId);
        console.log(`상태 선택 요소: ${name} → 직원ID: ${employeeId}`);
      });
      
      console.log('현재 화면에 표시된 직원 ID들:', currentEmployeeIds);
      console.log('받은 자동입력 데이터 키들:', Object.keys(attendanceData));
      
      for (const employeeId in attendanceData) {
        // employeeId 유효성 검사 추가
        if (!employeeId || typeof employeeId !== 'string') {
          console.error('유효하지 않은 employeeId:', employeeId);
          continue;
        }
        
        const data = attendanceData[employeeId];
        console.log(`직원 ${employeeId} 데이터 적용:`, data);
        
        // 현재 화면에 표시된 직원만 처리
        if (!currentEmployeeIds.includes(employeeId)) {
          console.log(`직원 ${employeeId}는 현재 화면에 표시되지 않음, 건너뜀`);
          console.log(`화면 직원 ID들:`, currentEmployeeIds);
          console.log(`자동입력 데이터 키:`, employeeId);
          continue;
        }
        
        console.log(`✅ 직원 ${employeeId} 매칭 성공, 데이터 적용 시작`);
        
        // 상태 선택
        const statusSelect = document.querySelector(`select[name="${employeeId}_status"]`);
        console.log(`직원 ${employeeId} 상태 선택 요소 찾기:`, statusSelect);
        console.log(`적용할 데이터:`, data);
        
        if (statusSelect) {
          console.log(`상태 업데이트: ${statusSelect.value} → ${data.status}`);
          statusSelect.value = data.status;
          
          // 백엔드에서 설정한 값을 보존하기 위해 toggleTimeInputs 호출하지 않음
          // toggleTimeInputs(employeeId);
          
          // 입력 필드 활성화만 처리 (값은 변경하지 않음)
          const checkInInput = document.querySelector(`input[name="${employeeId}_checkIn"]`);
          const checkOutInput = document.querySelector(`input[name="${employeeId}_checkOut"]`);
          const timeInputs = document.querySelectorAll(`input[name^="${employeeId}_"][class*="time-input"]`);
          
          if (checkInInput) checkInInput.disabled = false;
          if (checkOutInput) checkOutInput.disabled = false;
          timeInputs.forEach(input => input.disabled = false);
          
          // 출근/퇴근 시간 설정
          if (data.checkIn) {
            const checkInInput = document.querySelector(`input[name="${employeeId}_checkIn"]`);
            if (checkInInput) checkInInput.value = data.checkIn;
          }
          
          if (data.checkOut) {
            const checkOutInput = document.querySelector(`input[name="${employeeId}_checkOut"]`);
            if (checkOutInput) checkOutInput.value = data.checkOut;
          }
          
          // 근무 시간 설정
          if (data.basic !== undefined) {
            const basicInput = document.querySelector(`input[name="${employeeId}_basic"]`);
            if (basicInput) basicInput.value = data.basic;
          }
          
          if (data.overtime !== undefined) {
            const overtimeInput = document.querySelector(`input[name="${employeeId}_overtime"]`);
            if (overtimeInput) overtimeInput.value = data.overtime;
          }
          
          if (data.special !== undefined) {
            const specialInput = document.querySelector(`input[name="${employeeId}_special"]`);
            if (specialInput) specialInput.value = data.special;
          }
          
          if (data.specialOvertime !== undefined) {
            const specialOvertimeInput = document.querySelector(`input[name="${employeeId}_specialOvertime"]`);
            if (specialOvertimeInput) specialOvertimeInput.value = data.specialOvertime;
          }
          
          if (data.night !== undefined) {
            const nightInput = document.querySelector(`input[name="${employeeId}_night"]`);
            if (nightInput) nightInput.value = data.night;
          }
          
          // 총시간 재계산
          calculateTotalTime(employeeId);
          
          // 야간시간 계산
          if (data.checkIn && data.checkOut) {
            calculateNightTime(employeeId);
          }
        }
        
        // 비고 설정
        if (data.note) {
          const noteInput = document.querySelector(`input[name="${employeeId}_note"]`);
          if (noteInput) noteInput.value = data.note;
        }
      }
    }
    
    // 날짜에 따른 요일 표시 함수
    function updateDayOfWeek() {
      const dateInput = document.getElementById('attendanceDate');
      const dayOfWeekSpan = document.getElementById('selectedDayOfWeek');
      
      if (dateInput.value) {
        const selectedDate = new Date(dateInput.value);
        const days = ['일', '월', '화', '수', '목', '금', '토'];
        const dayOfWeek = days[selectedDate.getDay()];
        
        // 주말인지 확인하여 색상 변경
        if (selectedDate.getDay() === 0 || selectedDate.getDay() === 6) {
          dayOfWeekSpan.className = 'badge bg-warning text-dark fs-6 px-3 py-2';
        } else {
          dayOfWeekSpan.className = 'badge bg-secondary fs-6 px-3 py-2';
        }
        
        dayOfWeekSpan.textContent = dayOfWeek;
      }
    }
    
    // 페이지 로드 시 오늘 날짜 데이터 자동 조회 및 요일 표시
    document.addEventListener('DOMContentLoaded', function() {
      updateDayOfWeek(); // 초기 요일 표시
      loadAttendanceData();
    });
    
    // 날짜 변경 시 요일 업데이트
    document.getElementById('attendanceDate').addEventListener('change', updateDayOfWeek);
</script>

<%- include('footer') %>