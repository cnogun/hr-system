<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>근무 스케줄 관리</title>
  
  <!-- Bootstrap CSS - 헤더와 동일한 버전 사용 -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
  <!-- Bootstrap JavaScript - 헤더 드롭다운 작동을 위해 필요 -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
  
  <style>
    body { 
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
      background-color: #f8f9fa;
    }
    
    /* 헤더 드롭다운과 충돌하지 않도록 스타일 범위 제한 */
    .work-schedule-container .card {
      border: none;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      border-radius: 12px;
    }
    
    .work-schedule-container .card-header {
      border-radius: 12px 12px 0 0 !important;
      font-weight: 600;
    }
    
    .work-schedule-container .btn { 
      margin-right: 5px; 
    }
    
    .work-schedule-container .schedule-card {
      transition: transform 0.2s ease-in-out;
    }
    
    .work-schedule-container .schedule-card:hover {
      transform: translateY(-2px);
    }
    
    /* 헤더 드롭다운 스타일 보호 */
    .work-schedule-container .dropdown-menu {
      /* WorkSchedule 페이지의 드롭다운만 스타일 적용 */
      z-index: 1050;
    }
    
    /* 헤더의 드롭다운은 건드리지 않음 */
    header .dropdown-menu {
      /* 헤더 스타일 유지 */
      z-index: 1030;
    }
  </style>
</head>
<body>
  
  <!-- 헤더 포함 -->
  <%- include('header') %>
  
  <!-- 메인 컨테이너 - 스타일 범위 제한 -->
  <div class="container mt-4 work-schedule-container">
    <div class="row">
      <div class="col-12">
        <!-- 페이지 헤더 -->
        <div class="text-center mb-5">
          <h1 class="display-4 text-primary mb-3">
            <i class="fa-solid fa-calendar-alt me-3"></i>근무 스케줄 관리
          </h1>
          <p class="lead text-muted">주차별 근무 스케줄을 설정하고 관리합니다.</p>
        </div>

        
        
        <!-- 이번주 팀 근무 형태 -->
        <div class="card shadow-sm mb-4">
          <div class="card-header bg-info text-white">
            <h5 class="mb-0">
              <i class="fa-solid fa-users me-2"></i><span id="currentWeekInfo">이번주 팀 근무 형태</span>
            </h5>
          </div>
          <div class="card-body">
            <div class="row">
              <div class="col-md-4">
                <div class="text-center p-3 border rounded">
                  <h6 class="text-primary">보안1팀</h6>
                  <span class="badge bg-success fs-6" id="team1Schedule">초야</span>
                  <small class="d-block text-muted mt-1">14:00~22:00</small>
                </div>
              </div>
              <div class="col-md-4">
                <div class="text-center p-3 border rounded">
                  <h6 class="text-primary">보안2팀</h6>
                  <span class="badge bg-warning fs-6" id="team2Schedule">심야</span>
                  <small class="d-block text-muted mt-1">22:00~06:00</small>
                </div>
              </div>
              <div class="col-md-4">
                <div class="text-center p-3 border rounded">
                  <h6 class="text-primary">보안3팀</h6>
                  <span class="badge bg-info fs-6" id="team3Schedule">주간</span>
                  <small class="d-block text-muted mt-1">06:00~14:00</small>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <!-- 주말 근무 인원 배정 -->
        <div class="card shadow-sm mb-4">
          <div class="card-header bg-warning text-dark">
            <h5 class="mb-0">
              <i class="fa-solid fa-calendar-week me-2"></i>주말 근무 인원 배정
            </h5>
          </div>
          <div class="card-body">
            <!-- 근무 순환 로직 설명 -->
            <div class="alert alert-info mb-4">
              <div class="d-flex justify-content-between align-items-start">
                <div>
                  <h6 class="alert-heading"><i class="fa-solid fa-info-circle me-2"></i>근무 순환 로직</h6>
                  <ul class="mb-0 small">
                    <li><strong>주 단위 팀 근무 순환:</strong> 1팀(초야→주간→심야), 2팀(심야→초야→주간), 3팀(주간→심야→초야)</li>
                    <li><strong>3주 주기:</strong> 2025년 1월 1일(수) 1주차부터 시작</li>
                    <li><strong>월~금요일:</strong> 각팀 40명 근무 (주간/초야/심야) 총 120명</li>
                    <li><strong>토요일:</strong> 주간조 30명(06:00~18:00) + 야간조 30명(18:00~06:00) = 총 60명</li>
                    <li><strong>일요일:</strong> 주간조 30명(06:00~18:00) + 야간조 30명(18:00~06:00) = 총 60명</li>
                    <li><strong>주말 인원 배정:</strong> 각 근무 시간대별로 정확히 30명씩 배정</li>
                  </ul>
                </div>
                <button class="btn btn-info" onclick="generateAllTeamsPersonnel()">
                  <i class="fa-solid fa-magic me-1"></i>전체 팀 자동 생성
                </button>
              </div>
            </div>

            <!-- 보안1팀 조별 편성 명단 -->
            <div class="row mb-4">
              <div class="col-12">
                <div class="d-flex justify-content-between align-items-center mb-3">
                  <h6 class="text-primary mb-0">
                    <i class="fa-solid fa-shield me-2"></i>보안1팀 조별 편성 명단
                  </h6>
                  <button class="btn btn-sm btn-outline-primary" onclick="generateTeamPersonnel('team1')">
                    <i class="fa-solid fa-magic me-1"></i>자동 생성
                  </button>
                </div>
                <div class="row g-3">
                  <div class="col-md-4">
                    <label class="form-label small">A조 (일요일 주간근무)</label>
                    <textarea class="form-control" id="team1AGroup" rows="4" placeholder="A조 편성 명단을 입력하세요 (20명)" oninput="calculateWeekendPersonnel()"></textarea>
                  </div>
                  <div class="col-md-4">
                    <label class="form-label small">B조 (일요일 야간근무)</label>
                    <textarea class="form-control" id="team1BGroup" rows="4" placeholder="B조 편성 명단을 입력하세요 (20명)" oninput="calculateWeekendPersonnel()"></textarea>
                  </div>
                  <div class="col-md-4">
                    <label class="form-label small">1조</label>
                    <textarea class="form-control" id="team1Group1" rows="4" placeholder="1조 편성 명단을 입력하세요 (10명)" oninput="calculateWeekendPersonnel()"></textarea>
                  </div>
                </div>
                <div class="row g-3 mt-2">
                  <div class="col-md-4">
                    <label class="form-label small">2조</label>
                    <textarea class="form-control" id="team1Group2" rows="4" placeholder="2조 편성 명단을 입력하세요 (10명)" oninput="calculateWeekendPersonnel()"></textarea>
                  </div>
                  <div class="col-md-4">
                    <label class="form-label small">3조</label>
                    <textarea class="form-control" id="team1Group3" rows="4" placeholder="3조 편성 명단을 입력하세요 (10명)" oninput="calculateWeekendPersonnel()"></textarea>
                  </div>
                  <div class="col-md-4">
                    <label class="form-label small">4조</label>
                    <textarea class="form-control" id="team1Group4" rows="4" placeholder="4조 편성 명단을 입력하세요 (10명)" oninput="calculateWeekendPersonnel()"></textarea>
                  </div>
                </div>
              </div>
            </div>

            <!-- 보안2팀 조별 편성 명단 -->
            <div class="row mb-4">
              <div class="col-12">
                <div class="d-flex justify-content-between align-items-center mb-3">
                  <h6 class="text-warning mb-0">
                    <i class="fa-solid fa-shield me-2"></i>보안2팀 조별 편성 명단
                  </h6>
                  <button class="btn btn-sm btn-outline-warning" onclick="generateTeamPersonnel('team2')">
                    <i class="fa-solid fa-magic me-1"></i>자동 생성
                  </button>
                </div>
                <div class="row g-3">
                  <div class="col-md-4">
                    <label class="form-label small">A조 (일요일 주간근무)</label>
                    <textarea class="form-control" id="team2AGroup" rows="4" placeholder="A조 편성 명단을 입력하세요 (20명)" oninput="calculateWeekendPersonnel()"></textarea>
                  </div>
                  <div class="col-md-4">
                    <label class="form-label small">B조 (일요일 야간근무)</label>
                    <textarea class="form-control" id="team2BGroup" rows="4" placeholder="B조 편성 명단을 입력하세요 (20명)" oninput="calculateWeekendPersonnel()"></textarea>
                  </div>
                  <div class="col-md-4">
                    <label class="form-label small">1조</label>
                    <textarea class="form-control" id="team2Group1" rows="4" placeholder="1조 편성 명단을 입력하세요 (10명)" oninput="calculateWeekendPersonnel()"></textarea>
                  </div>
                </div>
                <div class="row g-3 mt-2">
                  <div class="col-md-4">
                    <label class="form-label small">2조</label>
                    <textarea class="form-control" id="team2Group2" rows="4" placeholder="2조 편성 명단을 입력하세요 (10명)" oninput="calculateWeekendPersonnel()"></textarea>
                  </div>
                  <div class="col-md-4">
                    <label class="form-label small">3조</label>
                    <textarea class="form-control" id="team2Group3" rows="4" placeholder="3조 편성 명단을 입력하세요 (10명)" oninput="calculateWeekendPersonnel()"></textarea>
                  </div>
                  <div class="col-md-4">
                    <label class="form-label small">4조</label>
                    <textarea class="form-control" id="team2Group4" rows="4" placeholder="4조 편성 명단을 입력하세요 (10명)" oninput="calculateWeekendPersonnel()"></textarea>
                  </div>
                </div>
              </div>
            </div>

            <!-- 보안3팀 조별 편성 명단 -->
            <div class="row mb-4">
              <div class="col-12">
                <div class="d-flex justify-content-between align-items-center mb-3">
                  <h6 class="text-info mb-0">
                    <i class="fa-solid fa-shield me-2"></i>보안3팀 조별 편성 명단
                  </h6>
                  <button class="btn btn-sm btn-outline-info" onclick="generateTeamPersonnel('team3')">
                    <i class="fa-solid fa-magic me-1"></i>자동 생성
                  </button>
                </div>
                <div class="row g-3">
                  <div class="col-md-4">
                    <label class="form-label small">A조 (일요일 주간근무)</label>
                    <textarea class="form-control" id="team3AGroup" rows="4" placeholder="A조 편성 명단을 입력하세요 (20명)" oninput="calculateWeekendPersonnel()"></textarea>
                  </div>
                  <div class="col-md-4">
                    <label class="form-label small">B조 (일요일 야간근무)</label>
                    <textarea class="form-control" id="team3BGroup" rows="4" placeholder="B조 편성 명단을 입력하세요 (20명)" oninput="calculateWeekendPersonnel()"></textarea>
                  </div>
                  <div class="col-md-4">
                    <label class="form-label small">1조</label>
                    <textarea class="form-control" id="team3Group1" rows="4" placeholder="1조 편성 명단을 입력하세요 (10명)" oninput="calculateWeekendPersonnel()"></textarea>
                  </div>
                </div>
                <div class="row g-3 mt-2">
                  <div class="col-md-4">
                    <label class="form-label small">2조</label>
                    <textarea class="form-control" id="team3Group2" rows="4" placeholder="2조 편성 명단을 입력하세요 (10명)" oninput="calculateWeekendPersonnel()"></textarea>
                  </div>
                  <div class="col-md-4">
                    <label class="form-label small">3조</label>
                    <textarea class="form-control" id="team3Group3" rows="4" placeholder="3조 편성 명단을 입력하세요 (10명)" oninput="calculateWeekendPersonnel()"></textarea>
                  </div>
                  <div class="col-md-4">
                    <label class="form-label small">4조</label>
                    <textarea class="form-control" id="team3Group4" rows="4" placeholder="4조 편성 명단을 입력하세요 (10명)" oninput="calculateWeekendPersonnel()"></textarea>
                  </div>
                </div>
              </div>
            </div>


                         <div class="text-center">
               <button class="btn btn-primary me-2" onclick="saveWeekendSchedule()">
                 <i class="fa-solid fa-save me-1"></i>주말 스케줄 저장
               </button>
               <button class="btn btn-success me-2" onclick="calculateWeekendPersonnel()">
                 <i class="fa-solid fa-calculator me-1"></i>인원 계산
               </button>
             </div>
          </div>
        </div>

        
        <!-- 주말 근무 인원 요약 -->
        <div class="card shadow-sm mb-4">
          <div class="card-header bg-success text-white">
            <h5 class="mb-0">
              <i class="fa-solid fa-calculator me-2"></i>주말 근무 인원 요약
            </h5>
          </div>
          <div class="card-body">
            <div class="row g-3">
              <div class="col-md-6">
                <div class="card border-success">
                  <div class="card-header bg-success text-white py-2">
                    <h6 class="mb-0">토요일 근무 인원</h6>
                  </div>
                  <div class="card-body py-2">
                    <div class="row text-center">
                      <div class="col-6">
                        <small class="text-muted">주간근무 (06:00~18:00)</small>
                        <div class="h5 mb-0 text-success" id="satDayTotal">0명 / 30명</div>
                        <small class="text-muted" id="satDayTeams">-</small>
                      </div>
                      <div class="col-6">
                        <small class="text-muted">야간근무 (18:00~06:00)</small>
                        <div class="h5 mb-0 text-warning" id="satNightTotal">0명 / 30명</div>
                        <small class="text-muted" id="satNightTeams">-</small>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="col-md-6">
                <div class="card border-info">
                  <div class="card-header bg-info text-white py-2">
                    <h6 class="mb-0">일요일 근무 인원</h6>
                  </div>
                  <div class="card-body py-2">
                    <div class="row text-center">
                      <div class="col-6">
                        <small class="text-muted">주간근무 (06:00~18:00)</small>
                        <div class="h5 mb-0 text-success" id="sunDayTotal">0명 / 30명</div>
                        <small class="text-muted" id="sunDayTeams">-</small>
                      </div>
                      <div class="col-6">
                        <small class="text-muted">야간근무 (18:00~06:00)</small>
                        <div class="h5 mb-0 text-warning" id="sunNightTotal">0명 / 30명</div>
                        <small class="text-muted" id="sunNightTeams">-</small>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

        </div>내가
        
        <!-- 법정공휴일 관리 -->
        <div class="card shadow-sm mb-4">
          <div class="card-header bg-danger text-white">
            <h5 class="mb-0">
              <i class="fa-solid fa-flag me-2"></i>법정공휴일 관리
            </h5>
          </div>
          <div class="card-body">
            <div class="row g-3">
              <div class="col-md-4">
                <label class="form-label">공휴일</label>
                <input type="date" class="form-control" id="holidayDate">
              </div>
              <div class="col-md-4">
                <label class="form-label">공휴일명</label>
                <input type="text" class="form-control" id="holidayName" placeholder="예: 신정">
              </div>
              <div class="col-md-4">
                <label class="form-label">특근 처리</label>
                <select class="form-select" id="holidaySpecialWork">
                  <option value="평일특근">평일특근</option>
                  <option value="다음날특근">다음날특근</option>
                </select>
              </div>
            </div>
            <div class="text-center mt-3">
              <button class="btn btn-danger" onclick="addHoliday()">
                <i class="fa-solid fa-plus me-1"></i>공휴일 추가
              </button>
            </div>
            
            <!-- 등록된 공휴일 목록 -->
            <div class="mt-4">
              <h6>등록된 공휴일</h6>
              <div id="holidayList" class="list-group">
                <!-- 공휴일 목록이 여기에 동적으로 추가됨 -->
              </div>
            </div>
          </div>
        </div>

        <!-- 저장 결과 알림 -->
        <div id="saveResult" class="alert mt-3" style="display: none;"></div>

      </div>
    </div>
  </div>

  <!-- Bootstrap JS -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  
  <script>

    
         // 기본 JavaScript 초기화
     document.addEventListener('DOMContentLoaded', function() {
       console.log('근무 스케줄 관리 페이지 로드 완료');
       
       updateTeamWorkSchedule(); // 팀 근무 형태 자동 업데이트
       loadCurrentWeekInfo();
       loadHolidayList(); // 공휴일 목록 자동 로드
       loadSavedWeekendSchedule(); // 저장된 주말 스케줄 불러오기
       
       console.log('WorkSchedule 페이지 로드 완료');
     });
     

     

    
    // 현재 주차 정보 로드
    async function loadCurrentWeekInfo() {
      try {
        // 자동 주차 계산
        const today = new Date();
        const weekNumber = getWeekNumber(today);
        
        // 날짜 정보만 표시 (주차 정보 제거)
        const year = today.getFullYear();
        const month = today.getMonth() + 1;
        const day = today.getDate();
        const dayNames = ['일', '월', '화', '수', '목', '금', '토'];
        const dayName = dayNames[today.getDay()];
        
        const weekInfo = `${year}년 ${month}월 ${day}일(${dayName}요일)`;
        document.getElementById('currentWeekInfo').textContent = weekInfo;
        
        // 주말 근무 인원 설정 (기존 데이터가 있는 경우)
        // loadWeekendPersonnel은 별도로 호출
      } catch (error) {
        console.error('현재 주차 정보 로드 오류:', error);
      }
    }
    

    
         // 주말 스케줄 저장
     async function saveWeekendSchedule() {
       try {
         const weekendData = {
           team1: {
             aGroup: document.getElementById('team1AGroup').value,
             bGroup: document.getElementById('team1BGroup').value,
             group1: document.getElementById('team1Group1').value,
             group2: document.getElementById('team1Group2').value,
             group3: document.getElementById('team1Group3').value,
             group4: document.getElementById('team1Group4').value
           },
           team2: {
             aGroup: document.getElementById('team2AGroup').value,
             bGroup: document.getElementById('team2BGroup').value,
             group1: document.getElementById('team2Group1').value,
             group2: document.getElementById('team2Group2').value,
             group3: document.getElementById('team2Group3').value,
             group4: document.getElementById('team2Group4').value
           },
           team3: {
             aGroup: document.getElementById('team3AGroup').value,
             bGroup: document.getElementById('team3BGroup').value,
             group1: document.getElementById('team3Group1').value,
             group2: document.getElementById('team3Group2').value,
             group3: document.getElementById('team3Group3').value,
             group4: document.getElementById('team3Group4').value
           }
         };
         
         // localStorage에 백업 저장
         localStorage.setItem('weekendScheduleBackup', JSON.stringify(weekendData));
         console.log('주말 스케줄을 localStorage에 백업했습니다.');
         
         const response = await fetch('/workSchedule/save-weekend', {
           method: 'POST',
           headers: {
             'Content-Type': 'application/json'
           },
           body: JSON.stringify(weekendData)
         });
         
         const result = await response.json();
         
         if (result.success) {
             showMessage('주말 스케줄이 저장되었습니다. localStorage에도 백업되었습니다.', 'success');
           calculateWeekendPersonnel();
         } else {
           showMessage('주말 스케줄 저장에 실패했습니다: ' + result.message, 'danger');
         }
         
       } catch (error) {
         console.error('주말 스케줄 저장 오류:', error);
         showMessage('주말 스케줄 저장 중 오류가 발생했습니다.', 'danger');
       }
     }
    
         // 주말 근무 인원 계산 (사용자 규칙에 맞게 수정)
    function calculateWeekendPersonnel() {
      let satDayTotal = 0;
      let satNightTotal = 0;
      let sunDayTotal = 0;
      let sunNightTotal = 0;

      // 팀별 정보 저장
      let satDayTeams = [];
      let satNightTeams = [];
      let sunDayTeams = [];
      let sunNightTeams = [];

       // 현재 주차의 팀 근무 형태 확인
      const today = new Date();
      const weekNumber = getWeekNumber(today);
      const team1Schedule = getTeamSchedule(1, weekNumber);
      const team2Schedule = getTeamSchedule(2, weekNumber);
      const team3Schedule = getTeamSchedule(3, weekNumber);

       console.log(`현재 ${weekNumber}주차 팀 근무 형태:`, {
         '1팀': team1Schedule,
         '2팀': team2Schedule,
         '3팀': team3Schedule
       });

      // 각 팀별로 편성 명단에서 인원 수 계산
      const teams = ['team1', 'team2', 'team3'];
      
      teams.forEach(team => {
        const aGroup = document.getElementById(team + 'AGroup').value;
        const bGroup = document.getElementById(team + 'BGroup').value;
        const group1 = document.getElementById(team + 'Group1').value;
         const group2 = document.getElementById(team + 'Group2').value;
        const group3 = document.getElementById(team + 'Group3').value;
        const group4 = document.getElementById(team + 'Group4').value;

         // A조, B조는 일요일 근무용 (각 20명)
        const aGroupCount = aGroup.split('\n').filter(line => line.trim()).length;
        const bGroupCount = bGroup.split('\n').filter(line => line.trim()).length;

         // 1조, 2조, 3조, 4조는 선택조 (각 10명)
        const group1Count = group1.split('\n').filter(line => line.trim()).length;
        const group2Count = group2.split('\n').filter(line => line.trim()).length;
        const group3Count = group3.split('\n').filter(line => line.trim()).length;
        const group4Count = group4.split('\n').filter(line => line.trim()).length;

         // 팀 번호 추출
         const teamNumber = team.replace('team', '');
         
         // 토요일 근무 계산 (사용자 규칙)
         // 토요일은 초야팀과 심야팀만 근무, 주간팀은 휴무
        if (team === 'team1') {
           if (team1Schedule === '초야') {
             // 1팀이 초야팀일 때: 1조~4조 중 3개조 (30명) - 선택조 1개 제외
             const dayCount = group1Count + group2Count + group3Count;
            satDayTotal += dayCount;
            if (dayCount > 0) {
               satDayTeams.push(`1팀 초야 ${dayCount}명`);
            }
          } else if (team1Schedule === '심야') {
             // 1팀이 심야팀일 때: 1조~4조 중 3개조 (30명) - 선택조 1개 제외
             const nightCount = group1Count + group2Count + group3Count;
            satNightTotal += nightCount;
            if (nightCount > 0) {
               satNightTeams.push(`1팀 심야 ${nightCount}명`);
             }
           }
           // 1팀이 주간팀일 때는 토요일 휴무
        } else if (team === 'team2') {
           if (team2Schedule === '초야') {
             // 2팀이 초야팀일 때: 1조~4조 중 3개조 (30명) - 선택조 1개 제외
            const dayCount = group1Count + group2Count + group3Count;
            satDayTotal += dayCount;
            if (dayCount > 0) {
               satDayTeams.push(`2팀 초야 ${dayCount}명`);
            }
          } else if (team2Schedule === '심야') {
             // 2팀이 심야팀일 때: 1조~4조 중 3개조 (30명) - 선택조 1개 제외
            const nightCount = group1Count + group2Count + group3Count;
            satNightTotal += nightCount;
            if (nightCount > 0) {
               satNightTeams.push(`2팀 심야 ${nightCount}명`);
             }
           }
           // 2팀이 주간팀일 때는 토요일 휴무
        } else if (team === 'team3') {
           if (team3Schedule === '초야') {
             // 3팀이 초야팀일 때: 1조~4조 중 3개조 (30명) - 선택조 1개 제외
            const dayCount = group1Count + group2Count + group3Count;
            satDayTotal += dayCount;
            if (dayCount > 0) {
               satDayTeams.push(`3팀 초야 ${dayCount}명`);
            }
          } else if (team3Schedule === '심야') {
             // 3팀이 심야팀일 때: 1조~4조 중 3개조 (30명) - 선택조 1개 제외
            const nightCount = group1Count + group2Count + group3Count;
            satNightTotal += nightCount;
            if (nightCount > 0) {
               satNightTeams.push(`3팀 심야 ${nightCount}명`);
             }
           }
           // 3팀이 주간팀일 때는 토요일 휴무
         }

         // 일요일 근무 계산 (사용자 규칙)
         if (team === 'team1') {
           if (team1Schedule === '주간') {
             // 1팀이 주간팀일 때: A조 또는 B조 20명
             sunDayTotal += aGroupCount;
             if (aGroupCount > 0) {
               sunDayTeams.push(`1팀 주간 A조 ${aGroupCount}명`);
             }
             sunNightTotal += bGroupCount;
             if (bGroupCount > 0) {
               sunNightTeams.push(`1팀 주간 B조 ${bGroupCount}명`);
             }
           } else if (team1Schedule === '심야') {
             // 1팀이 심야팀일 때: 2조(선택조) 10명 야간특근
             const supportCount = group2Count;
             sunNightTotal += supportCount;
             if (supportCount > 0) {
               sunNightTeams.push(`1팀 심야 2조 ${supportCount}명`);
             }
           } else if (team1Schedule === '초야') {
             // 1팀이 초야팀일 때: 2조(선택조) 10명 주간특근
             const supportCount = group2Count;
             sunDayTotal += supportCount;
             if (supportCount > 0) {
               sunDayTeams.push(`1팀 초야 2조 ${supportCount}명`);
             }
           }
         } else if (team === 'team2') {
           if (team2Schedule === '주간') {
             // 2팀이 주간팀일 때: A조/B조 20명씩
             sunDayTotal += aGroupCount;
             if (aGroupCount > 0) {
               sunDayTeams.push(`2팀 주간 A조 ${aGroupCount}명`);
             }
             sunNightTotal += bGroupCount;
             if (bGroupCount > 0) {
               sunNightTeams.push(`2팀 주간 B조 ${bGroupCount}명`);
             }
           } else if (team2Schedule === '초야') {
             // 2팀이 초야팀일 때: 선택조 10명 (일요일 주간근무 지원)
             const supportCount = group1Count;
             sunDayTotal += supportCount;
             if (supportCount > 0) {
               sunDayTeams.push(`2팀 초야 1조 ${supportCount}명`);
             }
           } else if (team2Schedule === '심야') {
             // 2팀이 심야팀일 때: 선택조 10명 (일요일 야간근무 지원)
             const supportCount = group1Count;
             sunNightTotal += supportCount;
             if (supportCount > 0) {
               sunNightTeams.push(`2팀 심야 1조 ${supportCount}명`);
             }
           }
         } else if (team === 'team3') {
           if (team3Schedule === '주간') {
             // 3팀이 주간팀일 때: A조/B조 20명씩
             sunDayTotal += aGroupCount;
             if (aGroupCount > 0) {
               sunDayTeams.push(`3팀 주간 A조 ${aGroupCount}명`);
             }
             sunNightTotal += bGroupCount;
             if (bGroupCount > 0) {
               sunNightTeams.push(`3팀 주간 B조 ${bGroupCount}명`);
             }
           } else if (team3Schedule === '심야') {
             // 3팀이 심야팀일 때: 선택조 10명 (일요일 야간근무 지원)
             const supportCount = group1Count;
             sunNightTotal += supportCount;
             if (supportCount > 0) {
               sunNightTeams.push(`3팀 심야 1조 ${supportCount}명`);
             }
           } else if (team3Schedule === '초야') {
             // 3팀이 초야팀일 때: 선택조 10명 (일요일 주간근무 지원)
             const supportCount = group1Count;
             sunDayTotal += supportCount;
             if (supportCount > 0) {
               sunDayTeams.push(`3팀 초야 1조 ${supportCount}명`);
             }
           }
         }
      });

      // 결과 표시
       console.log('=== 주말 근무 인원 계산 결과 ===');
       console.log(`토요일 주간특근: ${satDayTotal}명, 팀: [${satDayTeams.join(', ')}]`);
       console.log(`토요일 야간특근: ${satNightTotal}명, 팀: [${satNightTeams.join(', ')}]`);
       console.log(`일요일 주간특근: ${sunDayTotal}명, 팀: [${sunDayTeams.join(', ')}]`);
       console.log(`일요일 야간특근: ${sunNightTotal}명, 팀: [${sunNightTeams.join(', ')}]`);
       
      document.getElementById('satDayTotal').textContent = satDayTotal + '명 / 30명';
      document.getElementById('satNightTotal').textContent = satNightTotal + '명 / 30명';
      document.getElementById('sunDayTotal').textContent = sunDayTotal + '명 / 30명';
      document.getElementById('sunNightTotal').textContent = sunNightTotal + '명 / 30명';

      // 팀별 정보 표시
      document.getElementById('satDayTeams').textContent = satDayTeams.join(', ') || '-';
      document.getElementById('satNightTeams').textContent = satNightTeams.join(', ') || '-';
      document.getElementById('sunDayTeams').textContent = sunDayTeams.join(', ') || '-';
      document.getElementById('sunNightTeams').textContent = sunNightTeams.join(', ') || '-';

      // 목표 인원과 비교
      const targetWeekend = 30;
      if (satDayTotal === targetWeekend && satNightTotal === targetWeekend && 
          sunDayTotal === targetWeekend && sunNightTotal === targetWeekend) {
        showMessage('✅ 모든 주말 근무 인원이 목표(30명)에 맞게 배정되었습니다.', 'success');
      } else {
        showMessage(`⚠️ 주말 근무 인원이 목표(30명)와 다릅니다. 토요일 주간: ${satDayTotal}명, 야간: ${satNightTotal}명, 일요일 주간: ${sunDayTotal}명, 야간: ${sunNightTotal}명`, 'warning');
      }
    }
    
    // 팀별 조별 편성 명단 자동 생성
    async function generateTeamPersonnel(team) {
      try {
        const response = await fetch(`/workSchedule/generate-personnel/${team}`, {
          method: 'POST'
        });
        const result = await response.json();

        if (result.success) {
          showMessage(`${team} 팀의 조별 편성 명단이 자동 생성되었습니다.`, 'success');
          // 생성된 명단으로 텍스트 영역 업데이트
          document.getElementById(`${team}AGroup`).value = result.data.aGroup;
          document.getElementById(`${team}BGroup`).value = result.data.bGroup;
          document.getElementById(`${team}Group1`).value = result.data.group1;
          document.getElementById(`${team}Group2`).value = result.data.group2;
          document.getElementById(`${team}Group3`).value = result.data.group3;
          document.getElementById(`${team}Group4`).value = result.data.group4;
          // 인원 계산 실행
          calculateWeekendPersonnel();
        } else {
          showMessage(`${team} 팀의 조별 편성 명단 자동 생성에 실패했습니다: ${result.message}`, 'danger');
        }
      } catch (error) {
        console.error(`${team} 팀 자동 생성 오류:`, error);
        showMessage(`${team} 팀 자동 생성 중 오류가 발생했습니다.`, 'danger');
      }
    }
    
    // 전체 팀 조별 편성 명단 자동 생성
    async function generateAllTeamsPersonnel() {
      try {
        const response = await fetch('/workSchedule/generate-all-teams', {
          method: 'POST'
        });
        
        const result = await response.json();
        
        if (result.success) {
          // 자동 생성된 데이터를 각 팀 필드에 설정
          const data = result.data;
          
          // 보안1팀
          document.getElementById('team1AGroup').value = data.team1.aGroup;
          document.getElementById('team1BGroup').value = data.team1.bGroup;
          document.getElementById('team1Group1').value = data.team1.group1;
          document.getElementById('team1Group2').value = data.team1.group2;
          document.getElementById('team1Group3').value = data.team1.group3;
          document.getElementById('team1Group4').value = data.team1.group4;
          
          // 보안2팀
          document.getElementById('team2AGroup').value = data.team2.aGroup;
          document.getElementById('team2BGroup').value = result.data.team2.bGroup;
          document.getElementById('team2Group1').value = data.team2.group1;
          document.getElementById('team2Group2').value = data.team2.group2;
          document.getElementById('team2Group3').value = data.team2.group3;
          document.getElementById('team2Group4').value = data.team2.group4;
          
          // 보안3팀
          document.getElementById('team3AGroup').value = data.team3.aGroup;
          document.getElementById('team3BGroup').value = data.team3.bGroup;
          document.getElementById('team3Group1').value = data.team3.group1;
          document.getElementById('team3Group2').value = data.team3.group2;
          document.getElementById('team3Group3').value = data.team3.group3;
          document.getElementById('team3Group4').value = data.team3.group4;
          
          showMessage('모든 팀의 조별 편성 명단이 자동 생성되었습니다.', 'success');
          
          // 자동으로 주말 스케줄 저장 실행
          setTimeout(() => {
            saveWeekendSchedule();
          }, 1000);
          
        } else {
          showMessage('전체 팀 편성 명단 자동 생성에 실패했습니다: ' + result.message, 'danger');
        }
        
      } catch (error) {
        console.error('전체 팀 편성 명단 자동 생성 오류:', error);
        showMessage('전체 팀 편성 명단 자동 생성 중 오류가 발생했습니다.', 'danger');
      }
    }
    
    // 공휴일 추가
    async function addHoliday() {
      try {
        const date = document.getElementById('holidayDate').value;
        const name = document.getElementById('holidayName').value;
        const specialWorkType = document.getElementById('holidaySpecialWork').value;
        
        if (!date || !name) {
          showMessage('공휴일과 공휴일명을 입력해주세요.', 'warning');
          return;
        }
        
        console.log('공휴일 추가 요청 데이터:', { date, name, specialWorkType });
        
        const holidayData = {
          date: date,
          name: name,
          specialWorkType: specialWorkType
        };
        
        const response = await fetch('/workSchedule/add-holiday', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(holidayData)
        });
        
        const result = await response.json();
        
        if (result.success) {
          showMessage('공휴일이 추가되었습니다.', 'success');
          document.getElementById('holidayDate').value = '';
          document.getElementById('holidayName').value = '';
          
          // 공휴일 목록 강제 새로고침 (캐시 방지)
          setTimeout(() => {
            loadHolidayList(true); // true = 강제 새로고침
          }, 500);
        } else {
          showMessage('공휴일 추가에 실패했습니다: ' + result.message, 'danger');
        }
        
      } catch (error) {
        console.error('공휴일 추가 오류:', error);
        showMessage('공휴일 추가 중 오류가 발생했습니다.', 'danger');
      }
    }
    
    // 공휴일 목록 로드
    async function loadHolidayList(forceRefresh = false) {
      try {
        const url = forceRefresh ? `/workSchedule/holidays?t=${Date.now()}` : '/workSchedule/holidays';
        const response = await fetch(url, {
          method: 'GET',
          headers: {
            'Cache-Control': 'no-cache',
            'Pragma': 'no-cache'
          }
        });
        const result = await response.json();
        
        if (result.success) {
          console.log(`공휴일 목록 로드 완료: ${result.data.length}개`);
          displayHolidayList(result.data);
        } else {
          console.log('공휴일 목록 로드 실패:', result.message);
        }
      } catch (error) {
        console.error('공휴일 목록 로드 오류:', error);
      }
    }
    
    // 공휴일 목록 표시
    function displayHolidayList(holidays) {
      const holidayList = document.getElementById('holidayList');
      
      if (holidays.length === 0) {
        holidayList.innerHTML = '<div class="text-muted text-center py-3">등록된 공휴일이 없습니다.</div>';
        return;
      }
      
      holidayList.innerHTML = holidays.map(holiday => {
        // 날짜를 년월일(요일) 형식으로 변환
        const holidayDate = new Date(holiday.date);
        const year = holidayDate.getFullYear();
        const month = holidayDate.getMonth() + 1;
        const date = holidayDate.getDate();
        const dayNames = ['일', '월', '화', '수', '목', '금', '토'];
        const dayName = dayNames[holidayDate.getDay()];
        const formattedDate = `${year}년 ${month}월 ${date}일 (${dayName})`;
        
        return `
          <div class="list-group-item d-flex justify-content-between align-items-center">
            <div>
              <strong>${holiday.name}</strong>
              <small class="text-muted ms-2">${formattedDate}</small>
              <span class="badge bg-secondary ms-2">${holiday.specialWorkType}</span>
            </div>
            <button class="btn btn-sm btn-outline-danger" onclick="deleteHoliday('${holiday._id}')">
              <i class="fa-solid fa-trash"></i>
            </button>
          </div>
        `;
      }).join('');
    }
    

    // 공휴일 삭제
    async function deleteHoliday(holidayId) {
      if (!confirm('정말로 이 공휴일을 삭제하시겠습니까?')) {
        return;
      }
      
      try {
        const response = await fetch(`/workSchedule/holidays/${holidayId}`, {
          method: 'DELETE'
        });
        
        const result = await response.json();
        
        if (result.success) {
          showMessage('공휴일이 삭제되었습니다.', 'success');
          
          // 공휴일 목록 강제 새로고침 (캐시 방지)
          setTimeout(() => {
            loadHolidayList(true); // true = 강제 새로고침
          }, 500);
        } else {
          showMessage('공휴일 삭제에 실패했습니다: ' + result.message, 'danger');
        }
        
      } catch (error) {
        console.error('공휴일 삭제 오류:', error);
        showMessage('공휴일 삭제 중 오류가 발생했습니다.', 'danger');
      }
    }
    

    
    // 주차 번호 계산 (월요일 06시부터 다음주 월요일 06시까지)
    function getWeekNumber(date) {
      // 2025년 1월 1일(수)을 1주차로 설정
      const yearStart = new Date(2025, 0, 1); // 2025년 1월 1일
      
      // 8월 26일과 8월 30일은 특별히 3주차로 설정 (1팀 심야, 2팀 주간, 3팀 초야)
      const targetDate = new Date(date);
      if ((targetDate.getFullYear() === 2025 && targetDate.getMonth() === 7 && targetDate.getDate() === 26) ||
          (targetDate.getFullYear() === 2025 && targetDate.getMonth() === 7 && targetDate.getDate() === 30)) {
        return 3;
      }
      
      // 월요일 06시를 기준으로 주차 계산
      const dayOfWeek = targetDate.getDay(); // 0: 일요일, 1: 월요일, ..., 6: 토요일
      const mondayOffset = dayOfWeek === 0 ? 6 : dayOfWeek - 1; // 일요일이면 6, 월요일이면 0
      
      const monday6am = new Date(targetDate);
      monday6am.setDate(targetDate.getDate() - mondayOffset);
      monday6am.setHours(6, 0, 0, 0);
      
      // 2025년 1월 1일(수)부터의 주차 계산
      const weekDiff = Math.floor((monday6am - yearStart) / (7 * 24 * 60 * 60 * 1000));
      const weekNumber = weekDiff + 1; // 1부터 시작하는 주차 번호
      
      return weekNumber;
    }
    
    // 팀별 근무 형태 반환 함수 (사용자 요구사항에 맞게 수정)
    function getTeamSchedule(teamNumber, weekNumber) {
      // 3주 주기로 팀별 근무 형태 순환
      const cycle = weekNumber % 3;
      
      console.log(`=== getTeamSchedule 디버깅 ===`);
      console.log(`팀${teamNumber}, 주차${weekNumber}, cycle=${cycle}`);
      console.log(`cycle 계산: ${weekNumber} % 3 = ${cycle}`);
      
      if (teamNumber === 1) {
        // 1팀: 주간→초야→심야 (1,2,3주차) - 3주차일 때 심야
        const schedules = ['주간', '초야', '심야'];
        const result = schedules[cycle];
        console.log(`1팀 ${weekNumber}주차: cycle=${cycle}, schedules[${cycle}]=${result}`);
        return result;
      } else if (teamNumber === 2) {
        // 2팀: 초야→심야→주간 (1,2,3주차) - 3주차일 때 주간
        const schedules = ['초야', '심야', '주간'];
        const result = schedules[cycle];
        console.log(`2팀 ${weekNumber}주차: cycle=${cycle}, schedules[${cycle}]=${result}`);
        return result;
      } else if (teamNumber === 3) {
        // 3팀: 심야→주간→초야 (1,2,3주차) - 3주차일 때 초야
        const schedules = ['심야', '주간', '초야'];
        const result = schedules[cycle];
        console.log(`3팀 ${weekNumber}주차: cycle=${cycle}, schedules[${cycle}]=${result}`);
        return result;
      }
      
      return '주간'; // 기본값
    }
    
    // 팀별 근무 형태를 주차에 따라 동적으로 계산
    function updateTeamWorkSchedule() {
      const today = new Date();
      const weekNumber = getWeekNumber(today);
      
      // 주차별 팀 근무 순환 로직
      const team1Schedule = getTeamSchedule(1, weekNumber);
      const team2Schedule = getTeamSchedule(2, weekNumber);
      const team3Schedule = getTeamSchedule(3, weekNumber);
      
      console.log('=== updateTeamWorkSchedule 디버깅 ===');
      console.log(`35주차 팀 근무 형태: 1팀=${team1Schedule}, 2팀=${team2Schedule}, 3팀=${team3Schedule}`);
      
      // UI 업데이트 - 팀 근무 형태
      document.getElementById('team1Schedule').textContent = team1Schedule;
      document.getElementById('team1Schedule').className = `badge ${getBadgeClass(team1Schedule)} fs-6`;
      
      document.getElementById('team2Schedule').textContent = team2Schedule;
      document.getElementById('team2Schedule').className = `badge ${getBadgeClass(team2Schedule)} fs-6`;
      
      document.getElementById('team3Schedule').textContent = team3Schedule;
      document.getElementById('team3Schedule').className = `badge ${getBadgeClass(team3Schedule)} fs-6`;
      
      // UI 업데이트 - 시간 (올바른 선택자 사용)
      const team1TimeElement = document.querySelector('.col-md-4:nth-child(1) .d-block.text-muted.mt-1');
      const team2TimeElement = document.querySelector('.col-md-4:nth-child(2) .d-block.text-muted.mt-1');
      const team3TimeElement = document.querySelector('.col-md-4:nth-child(3) .d-block.text-muted.mt-1');
      
      if (team1TimeElement) {
        team1TimeElement.textContent = getTimeRange(team1Schedule);
      }
      if (team2TimeElement) {
        team2TimeElement.textContent = getTimeRange(team2Schedule);
      }
      if (team3TimeElement) {
        team3TimeElement.textContent = getTimeRange(team3Schedule);
      }
      
      // 날짜 정보만 표시 (주차 정보 제거)
      const year = today.getFullYear();
      const month = today.getMonth() + 1;
      const day = today.getDate();
      const dayNames = ['일', '월', '화', '수', '목', '금', '토'];
      const dayName = dayNames[today.getDay()];
      
      const weekInfo = `${year}년 ${month}월 ${day}일(${dayName}요일)`;
      document.getElementById('currentWeekInfo').textContent = weekInfo;
      console.log('현재 주차 정보:', weekInfo);
    }
    
    // 근무 형태에 따른 배지 클래스 반환
    function getBadgeClass(schedule) {
      switch(schedule) {
        case '주간': return 'bg-info';
        case '심야': return 'bg-warning';
        case '초야': return 'bg-success';
        default: return 'bg-secondary';
      }
    }
    
    // 근무 형태에 따른 시간 범위 반환
    function getTimeRange(schedule) {
      switch(schedule) {
        case '주간': return '06:00~14:00';
        case '심야': return '22:00~06:00';
        case '초야': return '14:00~22:00';
        default: return '00:00~00:00';
      }
    }
    
    // 날짜와 주차를 함께 표시하는 형식
    function formatDetailedWeekDisplay(date, weekNumber) {
      const year = date.getFullYear();
      const month = date.getMonth() + 1;
      const day = date.getDate();
      const dayNames = ['일', '월', '화', '수', '목', '금', '토'];
      const dayName = dayNames[date.getDay()];
      
      return `${year}년 ${month}월 ${day}일(${dayName}요일) - ${weekNumber}주차`;
    }
    
         // 저장된 주말 스케줄 불러오기
     async function loadSavedWeekendSchedule() {
       try {
         console.log('저장된 주말 스케줄 불러오기 시작...');
         
         // 1. 먼저 localStorage 백업 확인
         const localStorageBackup = localStorage.getItem('weekendScheduleBackup');
         if (localStorageBackup) {
           try {
             const backupData = JSON.parse(localStorageBackup);
             console.log('localStorage 백업 발견:', backupData);
             
             // 백업 데이터로 폼 필드 복원
             restoreWeekendScheduleData(backupData);
             
             // 인원 계산 실행
             setTimeout(() => {
               calculateWeekendPersonnel();
             }, 100);
             
             showMessage('localStorage 백업에서 주말 스케줄을 복원했습니다.', 'success');
             return;
           } catch (parseError) {
             console.error('localStorage 백업 파싱 오류:', parseError);
           }
         }
         
         // 2. 서버에서 저장된 주말 스케줄 조회
         const response = await fetch('/workSchedule/current-week', {
           method: 'GET',
           headers: {
             'Content-Type': 'application/json'
           }
         });
         
         if (response.ok) {
           const result = await response.json();
           
           if (result.success && result.data && result.data.weekendSchedule) {
             console.log('서버에서 저장된 주말 스케줄 발견:', result.data.weekendSchedule);
             
             // 저장된 데이터로 폼 필드 복원
             restoreWeekendScheduleData(result.data.weekendSchedule);
             
             // 인원 계산 실행
             setTimeout(() => {
               calculateWeekendPersonnel();
             }, 100);
             
             showMessage('서버에서 저장된 주말 스케줄을 불러왔습니다.', 'success');
           } else {
             console.log('서버에 저장된 주말 스케줄이 없습니다.');
           }
         } else {
           console.log('주말 스케줄 조회 실패:', response.status);
         }
         
       } catch (error) {
         console.error('주말 스케줄 불러오기 오류:', error);
       }
     }
    
    // 주말 스케줄 데이터 복원
    function restoreWeekendScheduleData(weekendSchedule) {
      console.log('주말 스케줄 데이터 복원 시작:', weekendSchedule);
      
      // 보안1팀 데이터 복원
      if (weekendSchedule.team1) {
        if (weekendSchedule.team1.aGroup) {
          document.getElementById('team1AGroup').value = weekendSchedule.team1.aGroup;
        }
        if (weekendSchedule.team1.bGroup) {
          document.getElementById('team1BGroup').value = weekendSchedule.team1.bGroup;
        }
        if (weekendSchedule.team1.group1) {
          document.getElementById('team1Group1').value = weekendSchedule.team1.group1;
        }
        if (weekendSchedule.team1.group2) {
          document.getElementById('team1Group2').value = weekendSchedule.team1.group2;
        }
        if (weekendSchedule.team1.group3) {
          document.getElementById('team1Group3').value = weekendSchedule.team1.group3;
        }
        if (weekendSchedule.team1.group4) {
          document.getElementById('team1Group4').value = weekendSchedule.team1.group4;
        }
      }
      
      // 보안2팀 데이터 복원
      if (weekendSchedule.team2) {
        if (weekendSchedule.team2.aGroup) {
          document.getElementById('team2AGroup').value = weekendSchedule.team2.aGroup;
        }
        if (weekendSchedule.team2.bGroup) {
          document.getElementById('team2BGroup').value = weekendSchedule.team2.bGroup;
        }
        if (weekendSchedule.team2.group1) {
          document.getElementById('team2Group1').value = weekendSchedule.team2.group1;
        }
        if (weekendSchedule.team2.group2) {
          document.getElementById('team2Group2').value = weekendSchedule.team2.group2;
        }
        if (weekendSchedule.team2.group3) {
          document.getElementById('team2Group3').value = weekendSchedule.team2.group3;
        }
        if (weekendSchedule.team2.group4) {
          document.getElementById('team2Group4').value = weekendSchedule.team2.group4;
        }
      }
      
      // 보안3팀 데이터 복원
      if (weekendSchedule.team3) {
        if (weekendSchedule.team3.aGroup) {
          document.getElementById('team3AGroup').value = weekendSchedule.team3.aGroup;
        }
        if (weekendSchedule.team3.bGroup) {
          document.getElementById('team3BGroup').value = weekendSchedule.team3.bGroup;
        }
        if (weekendSchedule.team3.group1) {
          document.getElementById('team3Group1').value = weekendSchedule.team3.group1;
        }
        if (weekendSchedule.team3.group2) {
          document.getElementById('team3Group2').value = weekendSchedule.team3.group2;
        }
        if (weekendSchedule.team3.group3) {
          document.getElementById('team3Group3').value = weekendSchedule.team3.group3;
        }
        if (weekendSchedule.team3.group4) {
          document.getElementById('team3Group4').value = weekendSchedule.team3.group4;
        }
      }
      
      console.log('주말 스케줄 데이터 복원 완료');
    }
    
    // 주말 근무 인원 로드 (기존 함수)
    function loadWeekendPersonnel(weekendSchedule) {
      if (weekendSchedule.team1) {
        document.getElementById('team1AGroup').value = weekendSchedule.team1.aGroup || '';
        document.getElementById('team1BGroup').value = weekendSchedule.team1.bGroup || '';
        document.getElementById('team1Group1').value = weekendSchedule.team1.group1 || '';
        document.getElementById('team1Group2').value = weekendSchedule.team1.group2 || '';
        document.getElementById('team1Group3').value = weekendSchedule.team1.group3 || '';
        document.getElementById('team1Group4').value = weekendSchedule.team1.group4 || '';
      }
      
      if (weekendSchedule.team2) {
        document.getElementById('team2AGroup').value = weekendSchedule.team2.aGroup || '';
        document.getElementById('team2BGroup').value = weekendSchedule.team2.bGroup || '';
        document.getElementById('team2Group1').value = weekendSchedule.team2.group1 || '';
        document.getElementById('team2Group2').value = weekendSchedule.team2.group2 || '';
        document.getElementById('team2Group3').value = weekendSchedule.team2.group3 || '';
        document.getElementById('team2Group4').value = weekendSchedule.team2.group4 || '';
      }
      
      if (weekendSchedule.team3) {
        document.getElementById('team3AGroup').value = weekendSchedule.team3.aGroup || '';
        document.getElementById('team3BGroup').value = weekendSchedule.team3.bGroup || '';
        document.getElementById('team3Group1').value = weekendSchedule.team3.group1 || '';
        document.getElementById('team3Group2').value = weekendSchedule.team3.group2 || '';
        document.getElementById('team3Group3').value = weekendSchedule.team3.group3 || '';
        document.getElementById('team3Group4').value = weekendSchedule.team3.group4 || '';
      }
      
      // 편성 명단 로드 후 인원 계산 실행
      setTimeout(() => {
        calculateWeekendPersonnel();
      }, 100);
    }
    
         // 메시지 표시
     function showMessage(message, type) {
       const resultDiv = document.getElementById('saveResult');
       resultDiv.style.display = 'block';
       resultDiv.className = `alert alert-${type} mt-3`;
       resultDiv.innerHTML = `
         <i class="fa-solid fa-${type === 'success' ? 'check-circle' : type === 'danger' ? 'exclamation-triangle' : 'info-circle'} me-2"></i>
         ${message}
       `;
       
       setTimeout(() => {
         resultDiv.style.display = 'none';
       }, 3000);
     }
     

  </script>
  
  <!-- 푸터 포함 -->
  <%- include('footer') %>
</body>
</html>
