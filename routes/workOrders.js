/**
 * ÌååÏùºÎ™Ö: workOrders.js
 * Î™©Ï†Å: Í∑ºÎ¨¥Î™ÖÎ†πÏÑú Í¥ÄÎ¶¨ ÎùºÏö∞Ìä∏
 * Í∏∞Îä•:
 * - Í∑ºÎ¨¥Î™ÖÎ†πÏÑú Î™©Î°ù Ï°∞Ìöå
 * - Í∑ºÎ¨¥Î™ÖÎ†πÏÑú ÏûëÏÑ±/ÏàòÏ†ï/ÏÇ≠Ï†ú
 * - Í∑ºÎ¨¥Î™ÖÎ†πÏÑú ÏÉÅÏÑ∏ Ï°∞Ìöå
 * - Ïù∏Ïõê ÌòÑÌô© Î∞è Í∑ºÎ¨¥ Ìé∏ÏÑ± Í¥ÄÎ¶¨
 * - ÏßÅÎ¨¥ ÍµêÏú° ÎÇ¥Ïö© Í¥ÄÎ¶¨
 * - Í∂åÌïú Í≤ÄÏ¶ù Î∞è Î≥¥Ïïà Ï≤òÎ¶¨
 */
const express = require('express');
const router = express.Router();
const WorkOrder = require('../models/WorkOrder');
const User = require('../models/User');
const Employee = require('../models/Employee');
const Log = require('../models/Log');

// Î°úÍ∑∏Ïù∏ Ï≤¥ÌÅ¨ ÎØ∏Îì§Ïõ®Ïñ¥
function isLoggedIn(req, res, next) {
  if (req.session.userId) {
    next();
  } else {
    res.redirect('/auth/login');
  }
}

// Í¥ÄÎ¶¨Ïûê Í∂åÌïú Ï≤¥ÌÅ¨
function adminOnly(req, res, next) {
  if (req.session.userRole === 'admin') {
    next();
  } else {
    res.status(403).send('Í¥ÄÎ¶¨ÏûêÎßå Ï†ëÍ∑º Í∞ÄÎä•Ìï©ÎãàÎã§.');
  }
}

// Î™®Îì† ÎùºÏö∞Ìä∏Ïóê Î°úÍπÖ ÎØ∏Îì§Ïõ®Ïñ¥ Ï∂îÍ∞Ä
router.use((req, res, next) => {
  console.log(`üîç Work Orders ÎùºÏö∞Ìä∏ ÏöîÏ≤≠: ${req.method} ${req.path}`);
  console.log(`üîç ÏõêÎ≥∏ URL: ${req.originalUrl}`);
  console.log(`üîç ÏøºÎ¶¨: ${JSON.stringify(req.query)}`);
  console.log(`üîç Î∞îÎîî _method: ${req.body ? req.body._method : 'N/A'}`);
  console.log(`üîç ÏöîÏ≤≠ Ìó§Îçî: ${JSON.stringify(req.headers)}`);
  next();
});

// Í∑ºÎ¨¥Î™ÖÎ†πÏÑú Î™©Î°ù Ï°∞Ìöå
router.get('/', isLoggedIn, async (req, res) => {
  try {
    console.log('üìã GET ÏöîÏ≤≠ ÏàòÏã† (Î™©Î°ù)');
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 10;
    const skip = (page - 1) * limit;
    
    // Í≤ÄÏÉâ Ï°∞Í±¥
    const filter = {};
    if (req.query.team) {
      filter['workInfo.team'] = req.query.team;
    }
    if (req.query.shift) {
      filter['workInfo.shift'] = req.query.shift;
    }
    if (req.query.status) {
      filter.status = req.query.status;
    }
    if (req.query.date) {
      const date = new Date(req.query.date);
      const nextDay = new Date(date);
      nextDay.setDate(nextDay.getDate() + 1);
      filter['workInfo.date'] = {
        $gte: date,
        $lt: nextDay
      };
    }
    
    // Î®ºÏ†Ä Í∏∞Î≥∏ Îç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏ†∏Ïò® ÌõÑ populate Ï≤òÎ¶¨
    let workOrders = await WorkOrder.find(filter)
      .sort({ 'workInfo.date': -1, createdAt: -1 })
      .skip(skip)
      .limit(limit);
    
    // populateÎ•º ÏïàÏ†ÑÌïòÍ≤å Ï≤òÎ¶¨
    try {
      workOrders = await WorkOrder.find(filter)
        .populate('createdBy', 'name email')
        .populate('updatedBy', 'name email')
        .sort({ 'workInfo.date': -1, createdAt: -1 })
        .skip(skip)
        .limit(limit)

    } catch (populateError) {
      console.log('‚ö†Ô∏è Populate Ïò§Î•ò Î∞úÏÉù, Í∏∞Î≥∏ Îç∞Ïù¥ÌÑ∞Î°ú ÏßÑÌñâ:', populateError.message);
      // populate Ïã§Ìå® Ïãú Í∏∞Î≥∏ Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©
    }
    
    // Í∞ÄÏÉÅ ÌïÑÎìú ÏàòÎèô Ï∂îÍ∞Ä
    workOrders = workOrders.map(workOrder => {
      if (workOrder.workInfo && workOrder.workInfo.date) {
        const date = new Date(workOrder.workInfo.date);
        const year = date.getFullYear().toString().slice(-2);
        const month = (date.getMonth() + 1).toString().padStart(2, '0');
        const day = date.getDate().toString().padStart(2, '0');
        const dayOfWeek = ['Ïùº', 'Ïõî', 'Ìôî', 'Ïàò', 'Î™©', 'Í∏à', 'ÌÜ†'][date.getDay()];
        
        const team = workOrder.workInfo.team || '';
        const shift = workOrder.workInfo.shift || '';
        const startTime = workOrder.workInfo.workTime && workOrder.workInfo.workTime.start ? workOrder.workInfo.workTime.start : '';
        const endTime = workOrder.workInfo.workTime && workOrder.workInfo.workTime.end ? workOrder.workInfo.workTime.end : '';
        
        const timeInfo = startTime && endTime ? `(${startTime}~${endTime})` : '';
        
        workOrder.formattedWorkInfo = `${year}. ${month}. ${day}(${dayOfWeek}) ${team} ${shift}${timeInfo}`;
      }
      return workOrder;
    });
    
    const total = await WorkOrder.countDocuments(filter);
    const totalPages = Math.ceil(total / limit);
    
    res.render('workOrderList', {
      workOrders,
      currentPage: page,
      totalPages,
      total,
      hasNextPage: page < totalPages,
      hasPrevPage: page > 1,
      nextPage: page + 1,
      prevPage: page - 1,
      user: req.session.user,
      session: req.session,
      userRole: req.session.userRole
    });
  } catch (error) {
    console.error('Í∑ºÎ¨¥Î™ÖÎ†πÏÑú Î™©Î°ù Ï°∞Ìöå Ïò§Î•ò:', error);
    res.status(500).render('error', { 
      message: 'Í∑ºÎ¨¥Î™ÖÎ†πÏÑú Î™©Î°ùÏùÑ Î∂àÎü¨Ïò§Îäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.',
      error: error
    });
  }
});

// Í∑ºÎ¨¥Î™ÖÎ†πÏÑú ÏûëÏÑ± Ìèº
router.get('/new', isLoggedIn, adminOnly, async (req, res) => {
  try {
    res.render('workOrderForm', {
      workOrder: null,
      user: req.session.user,
      userRole: req.session.userRole,
      session: req.session
    });
  } catch (error) {
    console.error('Í∑ºÎ¨¥Î™ÖÎ†πÏÑú ÏûëÏÑ± Ìèº Ïò§Î•ò:', error);
    res.status(500).render('error', { 
      message: 'Í∑ºÎ¨¥Î™ÖÎ†πÏÑú ÏûëÏÑ± ÌèºÏùÑ Î∂àÎü¨Ïò§Îäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.',
      error: error
    });
  }
});

// Í∑ºÎ¨¥Î™ÖÎ†πÏÑú ÏûëÏÑ± Ï≤òÎ¶¨
router.post('/', isLoggedIn, adminOnly, async (req, res) => {
  try {
    console.log('üìù POST ÏöîÏ≤≠ ÏàòÏã† (ÏÉùÏÑ±)');
    console.log('üìù ÏöîÏ≤≠ Î∞îÎîî:', JSON.stringify(req.body, null, 2));
    console.log('üìù Í≤∞ÏõêÏÉÅÏÑ∏ Îç∞Ïù¥ÌÑ∞:', JSON.stringify(req.body.personnelStatus, null, 2));
    console.log('üìù Ïù∏ÏõêÌé∏ÏÑ± Îç∞Ïù¥ÌÑ∞:', JSON.stringify(req.body.workAssignment, null, 2));
    console.log('üìù workAssignment ÌÉÄÏûÖ:', typeof req.body.workAssignment);
    console.log('üìù workAssignment Î∞∞Ïó¥ Ïó¨Î∂Ä:', Array.isArray(req.body.workAssignment));
    console.log('üìù workAssignment Í∏∏Ïù¥:', req.body.workAssignment ? req.body.workAssignment.length : 0);
    console.log('üìù workAssignment Ï≤òÏùå 10Í∞ú ÏöîÏÜå:', req.body.workAssignment ? req.body.workAssignment.slice(0, 10) : []);
    const workOrderData = {
      ...req.body,
      createdBy: req.session.userId,
      status: 'pending',
      // department ÌïÑÎìúÎ•º workInfo.teamÏóêÏÑú ÏûêÎèô ÏÑ§Ï†ï (Î∞ò -> ÌåÄÏúºÎ°ú Î≥ÄÌôò)
      department: req.body.workInfo && req.body.workInfo.team ? 
        req.body.workInfo.team.replace('Î∞ò', 'ÌåÄ') : 'Ï†ÑÏ≤¥'
    };
    
    // Ï§ëÏ≤©Îêú Í∞ùÏ≤¥ Íµ¨Ï°∞ Ï≤òÎ¶¨
    if (req.body.workInfo) {
      workOrderData.workInfo = {
        date: new Date(req.body.workInfo.date),
        team: req.body.workInfo.team,
        shift: req.body.workInfo.shift,
        workTime: {
          start: req.body.workInfo['workTime.start'] || '',
          end: req.body.workInfo['workTime.end'] || ''
        }
      };
    }
    
    if (req.body.personnelStatus) {
      workOrderData.personnelStatus = {
        totalPersonnel: parseInt(req.body.personnelStatus.totalPersonnel),
        absentPersonnel: parseInt(req.body.personnelStatus.absentPersonnel),
        currentPersonnel: parseInt(req.body.personnelStatus.currentPersonnel),
        absentDetails: (req.body.personnelStatus.absentDetails || []).filter(detail => 
          detail && detail.type && detail.employeeName && detail.employeeName.trim()
        ).map(detail => [detail.type, detail.employeeName]).flat(),
        accidentDetails: req.body.personnelStatus.accidentDetails || ''
      };
    }
    
    if (req.body.workAssignment) {
      // workAssignment Î∞∞Ïó¥ Ï≤òÎ¶¨ - ÌèºÏóêÏÑú Ï†ÑÏÜ°Îêú Í∞ùÏ≤¥ Î∞∞Ïó¥ÏùÑ Íµ¨Ï°∞ÌôîÎêú Í∞ùÏ≤¥Î°ú Î≥ÄÌôò
      const workAssignments = [];
      
      if (Array.isArray(req.body.workAssignment)) {
        // ÌèºÏóêÏÑú Ï†ÑÏÜ°Îêú Î∞∞Ïó¥ÏùÑ ÏàúÌöåÌïòÎ©∞ Ï≤òÎ¶¨
        req.body.workAssignment.forEach((assignment, index) => {
          if (assignment && assignment.region && assignment.location) {
            // members Î∞∞Ïó¥ Ï≤òÎ¶¨
            const members = [];
            if (assignment.assignment && assignment.assignment.members) {
              if (Array.isArray(assignment.assignment.members)) {
                members.push(...assignment.assignment.members.filter(member => member && member.trim()));
              } else {
                Object.keys(assignment.assignment.members).forEach(memberKey => {
                  const member = assignment.assignment.members[memberKey];
                  if (member && member.trim()) {
                    members.push(member.trim());
                  }
                });
              }
            }
            
            workAssignments.push({
              region: assignment.region,
              location: assignment.location,
              assignment: {
                teamLeader: assignment.assignment && assignment.assignment.teamLeader ? assignment.assignment.teamLeader : '',
                supervisor: assignment.assignment && assignment.assignment.supervisor ? assignment.assignment.supervisor : '',
                members: members
              }
            });
          }
        });
      } else {
        // Í∞ùÏ≤¥Ïù∏ Í≤ΩÏö∞ (Í∏∞Ï°¥ Î°úÏßÅ)
        Object.keys(req.body.workAssignment).forEach(key => {
          const assignment = req.body.workAssignment[key];
          if (assignment && assignment.region && assignment.location) {
            // members Î∞∞Ïó¥ Ï≤òÎ¶¨
            const members = [];
            if (assignment.assignment && assignment.assignment.members) {
              if (Array.isArray(assignment.assignment.members)) {
                members.push(...assignment.assignment.members);
              } else {
                Object.keys(assignment.assignment.members).forEach(memberKey => {
                  const member = assignment.assignment.members[memberKey];
                  if (member && member.trim()) {
                    members.push(member.trim());
                  }
                });
              }
            }
            
            workAssignments.push({
              region: assignment.region,
              location: assignment.location,
              assignment: {
                teamLeader: assignment.assignment && assignment.assignment.teamLeader ? assignment.assignment.teamLeader : '',
                supervisor: assignment.assignment && assignment.assignment.supervisor ? assignment.assignment.supervisor : '',
                members: members
              }
            });
          }
        });
      }
      
      workOrderData.workAssignment = workAssignments;
      console.log('üìù Ï≤òÎ¶¨Îêú workAssignments:', JSON.stringify(workAssignments, null, 2));
    }
    
    if (req.body.education) {
      workOrderData.education = {
        weeklyFocus: (req.body.education.weeklyFocus || []).filter(focus => focus && focus.trim()),
        generalEducation: (req.body.education.generalEducation || []).filter(education => education && education.trim())
      };
    }
    
    console.log('üìù Ï†ÄÏû•Ìï† Îç∞Ïù¥ÌÑ∞:', JSON.stringify(workOrderData, null, 2));
    const workOrder = new WorkOrder(workOrderData);
    await workOrder.save();
    console.log('‚úÖ Í∑ºÎ¨¥Î™ÖÎ†πÏÑú Ï†ÄÏû• ÏôÑÎ£å:', workOrder._id);
    
    // Î°úÍ∑∏ Í∏∞Î°ù
    await Log.create({
      userId: req.session.userId,
      action: 'CREATE_WORK_ORDER',
      details: `Í∑ºÎ¨¥Î™ÖÎ†πÏÑú ÏÉùÏÑ±: ${workOrder.workInfo.team} ${workOrder.workInfo.shift}`,
      ip: req.ip,
      userAgent: req.get('User-Agent')
    });
    
    req.flash('success', 'Í∑ºÎ¨¥Î™ÖÎ†πÏÑúÍ∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§.');
    res.redirect('/work-orders');
  } catch (error) {
    console.error('Í∑ºÎ¨¥Î™ÖÎ†πÏÑú ÏÉùÏÑ± Ïò§Î•ò:', error);
    console.error('Ïò§Î•ò ÏÉÅÏÑ∏:', error);
    
    let errorMessage = 'Í∑ºÎ¨¥Î™ÖÎ†πÏÑú ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.';
    
    // Íµ¨Ï≤¥Ï†ÅÏù∏ Ïò§Î•ò Î©îÏãúÏßÄ Ï†úÍ≥µ
    if (error.name === 'ValidationError') {
      const validationErrors = Object.values(error.errors).map(err => err.message);
      errorMessage = 'ÏûÖÎ†• Îç∞Ïù¥ÌÑ∞ Í≤ÄÏ¶ù Ïò§Î•ò: ' + validationErrors.join(', ');
    } else if (error.name === 'CastError') {
      errorMessage = 'Îç∞Ïù¥ÌÑ∞ ÌÉÄÏûÖ Ïò§Î•ò: ' + error.message;
    } else if (error.code === 11000) {
      errorMessage = 'Ï§ëÎ≥µÎêú Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÏäµÎãàÎã§.';
    }
    
    req.flash('error', errorMessage);
    
    // ÏÇ¨Ïö©ÏûêÍ∞Ä ÏûÖÎ†•Ìïú Îç∞Ïù¥ÌÑ∞Î•º Ïú†ÏßÄÌïòÍ∏∞ ÏúÑÌï¥ workOrder Í∞ùÏ≤¥ ÏÉùÏÑ±
    const workOrderWithData = {
      workInfo: {
        date: req.body.workInfo ? new Date(req.body.workInfo.date) : new Date(),
        team: req.body.workInfo ? req.body.workInfo.team : '',
        shift: req.body.workInfo ? req.body.workInfo.shift : '',
        workTime: {
          start: req.body.workInfo ? req.body.workInfo['workTime.start'] : '',
          end: req.body.workInfo ? req.body.workInfo['workTime.end'] : ''
        }
      },
      personnelStatus: {
        totalPersonnel: req.body.personnelStatus ? parseInt(req.body.personnelStatus.totalPersonnel) : 40,
        absentPersonnel: req.body.personnelStatus ? parseInt(req.body.personnelStatus.absentPersonnel) : 0,
        currentPersonnel: req.body.personnelStatus ? parseInt(req.body.personnelStatus.currentPersonnel) : 40,
        absentDetails: req.body.personnelStatus ? req.body.personnelStatus.absentDetails : [],
        accidentDetails: req.body.personnelStatus ? req.body.personnelStatus.accidentDetails : ''
      },
      workAssignment: req.body.workAssignment || [],
      education: {
        weeklyFocus: req.body.education ? req.body.education.weeklyFocus : [],
        generalEducation: req.body.education ? req.body.education.generalEducation : []
      }
    };
    
    res.render('workOrderForm', {
      workOrder: workOrderWithData,
      user: req.session.user,
      userRole: req.session.userRole,
      session: req.session,
      errors: [errorMessage]
    });
  }
});

// Í∑ºÎ¨¥Î™ÖÎ†πÏÑú ÏàòÏ†ï Ìèº
router.get('/:id/edit', isLoggedIn, adminOnly, async (req, res) => {
  try {
    const workOrder = await WorkOrder.findById(req.params.id);
    
    if (!workOrder) {
      return res.status(404).render('error', { 
        message: 'Í∑ºÎ¨¥Î™ÖÎ†πÏÑúÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.',
        error: { status: 404 }
      });
    }
    
    res.render('workOrderForm', {
      workOrder,
      user: req.session.user,
      userRole: req.session.userRole,
      session: req.session
    });
  } catch (error) {
    console.error('Í∑ºÎ¨¥Î™ÖÎ†πÏÑú ÏàòÏ†ï Ìèº Ïò§Î•ò:', error);
    res.status(500).render('error', { 
      message: 'Í∑ºÎ¨¥Î™ÖÎ†πÏÑú ÏàòÏ†ï ÌèºÏùÑ Î∂àÎü¨Ïò§Îäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.',
      error: error
    });
  }
});

// Í∑ºÎ¨¥Î™ÖÎ†πÏÑú ÏÉÅÏÑ∏ Ï°∞Ìöå
router.get('/:id', isLoggedIn, async (req, res) => {
  try {
    console.log('üîç WorkOrder Ï°∞Ìöå ÏöîÏ≤≠:', req.params.id);
    
    // Î®ºÏ†Ä populate ÏóÜÏù¥ Ï°∞Ìöå
    let workOrder = await WorkOrder.findById(req.params.id);
    
    // populateÎäî Î≥ÑÎèÑÎ°ú Ï≤òÎ¶¨ (Ïò§Î•ò Î∞©ÏßÄ)
    if (workOrder) {
      try {
        if (workOrder.createdBy) {
          await workOrder.populate('createdBy', 'name email');
        }
        if (workOrder.updatedBy) {
          await workOrder.populate('updatedBy', 'name email');
        }
      } catch (populateError) {
        console.log('‚ö†Ô∏è Populate Ïò§Î•ò (Î¨¥ÏãúÎê®):', populateError.message);
      }
    }
    
    console.log('üìã WorkOrder Ï°∞Ìöå Í≤∞Í≥º:', workOrder ? 'Î∞úÍ≤¨Îê®' : 'ÏóÜÏùå');
    
    if (!workOrder) {
      console.log('‚ùå WorkOrderÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
      return res.status(404).render('error', { 
        message: 'Í∑ºÎ¨¥Î™ÖÎ†πÏÑúÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.',
        error: { status: 404 }
      });
    }
    
    // Í∑ºÎ¨¥Ï°∞ Ï†ïÎ≥¥ Ìè¨Îß∑ÌåÖ
    const formatWorkInfo = (workOrder) => {
      if (!workOrder.workInfo) return '';
      
      const { date, team, shift } = workOrder.workInfo;
      if (!date || !team || !shift) return '';
      
      // ÎÇ†Ïßú Ìè¨Îß∑ÌåÖ (YYYY-MM-DD -> YYYYÎÖÑ MÏõî DÏùº(ÏöîÏùº))
      const dateObj = new Date(date);
      const year = dateObj.getFullYear(); // Ïù¥ÎØ∏ 4ÏûêÎ¶¨ Ïà´Ïûê
      const month = dateObj.getMonth() + 1;
      const day = dateObj.getDate();
      const weekdays = ['Ïùº', 'Ïõî', 'Ìôî', 'Ïàò', 'Î™©', 'Í∏à', 'ÌÜ†'];
      const weekday = weekdays[dateObj.getDay()];
      
      // ÎîîÎ≤ÑÍπÖ Î°úÍ∑∏ Ï∂îÍ∞Ä
      console.log('üóìÔ∏è ÎÇ†Ïßú Ìè¨Îß∑ÌåÖ:', {
        originalDate: date,
        dateObj: dateObj,
        year: year,
        month: month,
        day: day,
        weekday: weekday
      });
      
      // ÏãúÍ∞Ñ Ìè¨Îß∑ÌåÖ
      const timeFormat = {
        'day': 'Ï£ºÍ∞ÑÏ°∞(06:00~18:00)',
        'night': 'Ïã¨ÏïºÏ°∞(22:00~06:00)',
        'evening': 'Ï†ÄÎÖÅÏ°∞(18:00~22:00)',
        'Ï£ºÍ∞ÑÏ°∞': 'Ï£ºÍ∞ÑÏ°∞(06:00~14:00)',
        'Ï¥àÏïºÏ°∞': 'Ï¥àÏïºÏ°∞(14:00~22:00)',
        'Ïã¨ÏïºÏ°∞': 'Ïã¨ÏïºÏ°∞(22:00~06:00)',
        'Ï£ºÍ∞ÑÌäπÍ∑ºÏ°∞': 'Ï£ºÍ∞ÑÌäπÍ∑ºÏ°∞(06:00~18:00)',
        'ÏïºÍ∞ÑÌäπÍ∑ºÏ°∞': 'ÏïºÍ∞ÑÌäπÍ∑ºÏ°∞(18:00~06:00)'
      };
      
      const formatted = `${year}ÎÖÑ ${month}Ïõî ${day}Ïùº(${weekday}) ${team} ${timeFormat[shift] || shift}`;
      console.log('üóìÔ∏è ÏµúÏ¢Ö Ìè¨Îß∑ÌåÖ Í≤∞Í≥º:', formatted);
      
      return formatted;
    };
    
    // Ìè¨Îß∑Îêú Í∑ºÎ¨¥Ï°∞ Ï†ïÎ≥¥ Ï∂îÍ∞Ä
    workOrder.formattedWorkInfo = formatWorkInfo(workOrder);
    
    console.log('‚úÖ WorkOrder Î†åÎçîÎßÅ ÏãúÏûë');
    res.render('workOrder', {
      workOrder,
      user: req.session.user,
      userRole: req.session.userRole,
      session: req.session
    });
  } catch (error) {
    console.error('‚ùå Í∑ºÎ¨¥Î™ÖÎ†πÏÑú ÏÉÅÏÑ∏ Ï°∞Ìöå Ïò§Î•ò:', error);
    res.status(500).render('error', { 
      message: 'Í∑ºÎ¨¥Î™ÖÎ†πÏÑúÎ•º Î∂àÎü¨Ïò§Îäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.',
      error: error
    });
  }
});

// Í∑ºÎ¨¥Î™ÖÎ†πÏÑú ÏàòÏ†ï Ï≤òÎ¶¨
router.put('/:id', isLoggedIn, adminOnly, async (req, res) => {
  try {
    console.log('üîß PUT ÏöîÏ≤≠ ÏàòÏã†:', req.params.id);
    console.log('üîß ÏöîÏ≤≠ Î©îÏÑúÎìú:', req.method);
    console.log('üîß ÏõêÎ≥∏ Î©îÏÑúÎìú:', req.originalMethod);
    console.log('üîß ÏöîÏ≤≠ URL:', req.url);
    console.log('üîß ÏöîÏ≤≠ Í≤ΩÎ°ú:', req.path);
    console.log('üîß ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥:', req.session.user);
    
    const workOrder = await WorkOrder.findById(req.params.id);
    
    if (!workOrder) {
      return res.status(404).render('error', { 
        message: 'Í∑ºÎ¨¥Î™ÖÎ†πÏÑúÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.',
        error: { status: 404 }
      });
    }
    
    // ÏôÑÎ£åÎêú Î™ÖÎ†πÏÑúÎäî ÏàòÏ†ï Î∂àÍ∞Ä
    if (workOrder.status === 'completed') {
      req.flash('error', 'ÏôÑÎ£åÎêú Í∑ºÎ¨¥Î™ÖÎ†πÏÑúÎäî ÏàòÏ†ïÌï† Ïàò ÏóÜÏäµÎãàÎã§.');
      return res.redirect(`/work-orders/${workOrder._id}`);
    }
    
    const updateData = {
      ...req.body,
      updatedBy: req.session.userId,
      // department ÌïÑÎìúÎ•º workInfo.teamÏóêÏÑú ÏûêÎèô ÏÑ§Ï†ï (Î∞ò -> ÌåÄÏúºÎ°ú Î≥ÄÌôò)
      department: req.body.workInfo && req.body.workInfo.team ? 
        req.body.workInfo.team.replace('Î∞ò', 'ÌåÄ') : 'Ï†ÑÏ≤¥'
    };
    
    // Ï§ëÏ≤©Îêú Í∞ùÏ≤¥ Íµ¨Ï°∞ Ï≤òÎ¶¨
    if (req.body.workInfo) {
      updateData.workInfo = {
        date: new Date(req.body.workInfo.date),
        team: req.body.workInfo.team,
        shift: req.body.workInfo.shift,
        workTime: {
          start: req.body.workInfo['workTime.start'],
          end: req.body.workInfo['workTime.end']
        }
      };
    }
    
    if (req.body.personnelStatus) {
      updateData.personnelStatus = {
        totalPersonnel: parseInt(req.body.personnelStatus.totalPersonnel),
        absentPersonnel: parseInt(req.body.personnelStatus.absentPersonnel),
        currentPersonnel: parseInt(req.body.personnelStatus.currentPersonnel),
        absentDetails: (req.body.personnelStatus.absentDetails || []).filter(detail => 
          detail && detail.type && detail.employeeName && detail.employeeName.trim()
        ).map(detail => [detail.type, detail.employeeName]).flat(),
        accidentDetails: req.body.personnelStatus.accidentDetails || ''
      };
    }
    
    if (req.body.workAssignment) {
      // workAssignment Î∞∞Ïó¥ Ï≤òÎ¶¨ - ÌèºÏóêÏÑú Ï†ÑÏÜ°Îêú Í∞ùÏ≤¥ Î∞∞Ïó¥ÏùÑ Íµ¨Ï°∞ÌôîÎêú Í∞ùÏ≤¥Î°ú Î≥ÄÌôò
      const workAssignments = [];
      
      if (Array.isArray(req.body.workAssignment)) {
        // ÌèºÏóêÏÑú Ï†ÑÏÜ°Îêú Î∞∞Ïó¥ÏùÑ ÏàúÌöåÌïòÎ©∞ Ï≤òÎ¶¨
        req.body.workAssignment.forEach((assignment, index) => {
          if (assignment && assignment.region && assignment.location) {
            // members Î∞∞Ïó¥ Ï≤òÎ¶¨
            const members = [];
            if (assignment.assignment && assignment.assignment.members) {
              if (Array.isArray(assignment.assignment.members)) {
                members.push(...assignment.assignment.members.filter(member => member && member.trim()));
              } else {
                Object.keys(assignment.assignment.members).forEach(memberKey => {
                  const member = assignment.assignment.members[memberKey];
                  if (member && member.trim()) {
                    members.push(member.trim());
                  }
                });
              }
            }
            
            workAssignments.push({
              region: assignment.region,
              location: assignment.location,
              assignment: {
                teamLeader: assignment.assignment && assignment.assignment.teamLeader ? assignment.assignment.teamLeader : '',
                supervisor: assignment.assignment && assignment.assignment.supervisor ? assignment.assignment.supervisor : '',
                members: members
              }
            });
          }
        });
      } else {
        // Í∞ùÏ≤¥Ïù∏ Í≤ΩÏö∞ (Í∏∞Ï°¥ Î°úÏßÅ)
        Object.keys(req.body.workAssignment).forEach(key => {
          const assignment = req.body.workAssignment[key];
          if (assignment && assignment.region && assignment.location) {
            // members Î∞∞Ïó¥ Ï≤òÎ¶¨
            const members = [];
            if (assignment.assignment && assignment.assignment.members) {
              if (Array.isArray(assignment.assignment.members)) {
                members.push(...assignment.assignment.members);
              } else {
                Object.keys(assignment.assignment.members).forEach(memberKey => {
                  const member = assignment.assignment.members[memberKey];
                  if (member && member.trim()) {
                    members.push(member.trim());
                  }
                });
              }
            }
            
            workAssignments.push({
              region: assignment.region,
              location: assignment.location,
              assignment: {
                teamLeader: assignment.assignment && assignment.assignment.teamLeader ? assignment.assignment.teamLeader : '',
                supervisor: assignment.assignment && assignment.assignment.supervisor ? assignment.assignment.supervisor : '',
                members: members
              }
            });
          }
        });
      }
      
      updateData.workAssignment = workAssignments;
      console.log('üìù Ï≤òÎ¶¨Îêú workAssignments (PUT):', JSON.stringify(workAssignments, null, 2));
    }
    
    if (req.body.education) {
      updateData.education = {
        weeklyFocus: (req.body.education.weeklyFocus || []).filter(focus => focus && focus.trim()),
        generalEducation: (req.body.education.generalEducation || []).filter(education => education && education.trim())
      };
    }
    
    await WorkOrder.findByIdAndUpdate(req.params.id, updateData);
    
    // Î°úÍ∑∏ Í∏∞Î°ù
    await Log.create({
      userId: req.session.userId,
      action: 'UPDATE_WORK_ORDER',
      details: `Í∑ºÎ¨¥Î™ÖÎ†πÏÑú ÏàòÏ†ï: ${workOrder.workInfo.team} ${workOrder.workInfo.shift}`,
      ip: req.ip,
      userAgent: req.get('User-Agent')
    });
    
    req.flash('success', 'Í∑ºÎ¨¥Î™ÖÎ†πÏÑúÍ∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏàòÏ†ïÎêòÏóàÏäµÎãàÎã§.');
    res.redirect(`/work-orders/${req.params.id}`);
  } catch (error) {
    console.error('Í∑ºÎ¨¥Î™ÖÎ†πÏÑú ÏàòÏ†ï Ïò§Î•ò:', error);
    console.error('Ïò§Î•ò ÏÉÅÏÑ∏:', error);
    req.flash('error', 'Í∑ºÎ¨¥Î™ÖÎ†πÏÑú ÏàòÏ†ï Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ' + error.message);
    res.redirect(`/work-orders/${req.params.id}/edit`);
  }
});

// POST ÏöîÏ≤≠ÏùÑ PUTÏúºÎ°ú Ï≤òÎ¶¨ (method-override ÎåÄÏ≤¥)
router.post('/:id', isLoggedIn, adminOnly, async (req, res) => {
  try {
    console.log('üîÑ POST ÏöîÏ≤≠ÏùÑ PUTÏúºÎ°ú Ï≤òÎ¶¨:', req.params.id);
    console.log('üîÑ _method:', req.body._method);
    
    // _methodÍ∞Ä PUTÏù∏ Í≤ΩÏö∞ PUT Î°úÏßÅ Ïã§Ìñâ
    if (req.body._method === 'PUT') {
      console.log('üîß PUT Î°úÏßÅ Ïã§Ìñâ ÏãúÏûë');
      
      const workOrder = await WorkOrder.findById(req.params.id);
      
      if (!workOrder) {
        return res.status(404).render('error', { 
          message: 'Í∑ºÎ¨¥Î™ÖÎ†πÏÑúÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.',
          error: { status: 404 }
        });
      }
      
      // ÏôÑÎ£åÎêú Î™ÖÎ†πÏÑúÎäî ÏàòÏ†ï Î∂àÍ∞Ä
      if (workOrder.status === 'completed') {
        req.flash('error', 'ÏôÑÎ£åÎêú Í∑ºÎ¨¥Î™ÖÎ†πÏÑúÎäî ÏàòÏ†ïÌï† Ïàò ÏóÜÏäµÎãàÎã§.');
        return res.redirect(`/work-orders/${workOrder._id}`);
      }
      
      const updateData = {
        ...req.body,
        updatedBy: req.session.userId,
        // department ÌïÑÎìúÎ•º workInfo.teamÏóêÏÑú ÏûêÎèô ÏÑ§Ï†ï (Î∞ò -> ÌåÄÏúºÎ°ú Î≥ÄÌôò)
        department: req.body.workInfo && req.body.workInfo.team ? 
          req.body.workInfo.team.replace('Î∞ò', 'ÌåÄ') : 'Ï†ÑÏ≤¥'
      };
      
      // Ï§ëÏ≤©Îêú Í∞ùÏ≤¥ Íµ¨Ï°∞ Ï≤òÎ¶¨
      if (req.body.workInfo) {
        updateData.workInfo = {
          date: new Date(req.body.workInfo.date),
          team: req.body.workInfo.team,
          shift: req.body.workInfo.shift,
          workTime: {
            start: req.body.workInfo['workTime.start'] || '',
            end: req.body.workInfo['workTime.end'] || ''
          }
        };
      }
      
      if (req.body.personnelStatus) {
        updateData.personnelStatus = {
          totalPersonnel: parseInt(req.body.personnelStatus.totalPersonnel),
          absentPersonnel: parseInt(req.body.personnelStatus.absentPersonnel),
          currentPersonnel: parseInt(req.body.personnelStatus.currentPersonnel),
          absentDetails: (req.body.personnelStatus.absentDetails || []).filter(detail => 
            detail && detail.type && detail.employeeName && detail.employeeName.trim()
          ).map(detail => [detail.type, detail.employeeName]).flat(),
          accidentDetails: req.body.personnelStatus.accidentDetails || ''
        };
      }
      
      if (req.body.workAssignment) {
        // workAssignment Î∞∞Ïó¥ Ï≤òÎ¶¨ - ÌèºÏóêÏÑú Ï†ÑÏÜ°Îêú Í∞ùÏ≤¥ Î∞∞Ïó¥ÏùÑ Íµ¨Ï°∞ÌôîÎêú Í∞ùÏ≤¥Î°ú Î≥ÄÌôò
        const workAssignments = [];
        
        if (Array.isArray(req.body.workAssignment)) {
          // ÌèºÏóêÏÑú Ï†ÑÏÜ°Îêú Î∞∞Ïó¥ÏùÑ ÏàúÌöåÌïòÎ©∞ Ï≤òÎ¶¨
          req.body.workAssignment.forEach((assignment, index) => {
            if (assignment && assignment.region && assignment.location) {
              // members Î∞∞Ïó¥ Ï≤òÎ¶¨
              const members = [];
              if (assignment.assignment && assignment.assignment.members) {
                if (Array.isArray(assignment.assignment.members)) {
                  members.push(...assignment.assignment.members.filter(member => member && member.trim()));
                } else {
                  Object.keys(assignment.assignment.members).forEach(memberKey => {
                    const member = assignment.assignment.members[memberKey];
                    if (member && member.trim()) {
                      members.push(member.trim());
                    }
                  });
                }
              }
              
              workAssignments.push({
                region: assignment.region,
                location: assignment.location,
                assignment: {
                  teamLeader: assignment.assignment && assignment.assignment.teamLeader ? assignment.assignment.teamLeader : '',
                  supervisor: assignment.assignment && assignment.assignment.supervisor ? assignment.assignment.supervisor : '',
                  members: members
                }
              });
            }
          });
        } else {
          // Í∞ùÏ≤¥Ïù∏ Í≤ΩÏö∞ (Í∏∞Ï°¥ Î°úÏßÅ)
          Object.keys(req.body.workAssignment).forEach(key => {
            const assignment = req.body.workAssignment[key];
            if (assignment && assignment.region && assignment.location) {
              // members Î∞∞Ïó¥ Ï≤òÎ¶¨
              const members = [];
              if (assignment.assignment && assignment.assignment.members) {
                if (Array.isArray(assignment.assignment.members)) {
                  members.push(...assignment.assignment.members);
                } else {
                  Object.keys(assignment.assignment.members).forEach(memberKey => {
                    const member = assignment.assignment.members[memberKey];
                    if (member && member.trim()) {
                      members.push(member.trim());
                    }
                  });
                }
              }
              
              workAssignments.push({
                region: assignment.region,
                location: assignment.location,
                assignment: {
                  teamLeader: assignment.assignment && assignment.assignment.teamLeader ? assignment.assignment.teamLeader : '',
                  supervisor: assignment.assignment && assignment.assignment.supervisor ? assignment.assignment.supervisor : '',
                  members: members
                }
              });
            }
          });
        }
        
        updateData.workAssignment = workAssignments;
        console.log('üìù Ï≤òÎ¶¨Îêú workAssignments (POST-to-PUT):', JSON.stringify(workAssignments, null, 2));
      }
      
      if (req.body.education) {
        updateData.education = {
          weeklyFocus: (req.body.education.weeklyFocus || []).filter(focus => focus && focus.trim()),
          generalEducation: (req.body.education.generalEducation || []).filter(education => education && education.trim())
        };
      }
      
      await WorkOrder.findByIdAndUpdate(req.params.id, updateData);
      
      // Î°úÍ∑∏ Í∏∞Î°ù
      await Log.create({
        userId: req.session.userId,
        action: 'UPDATE_WORK_ORDER',
        details: `Í∑ºÎ¨¥Î™ÖÎ†πÏÑú ÏàòÏ†ï: ${workOrder.workInfo.team} ${workOrder.workInfo.shift}`,
        ip: req.ip,
        userAgent: req.get('User-Agent')
      });
      
      req.flash('success', 'Í∑ºÎ¨¥Î™ÖÎ†πÏÑúÍ∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏàòÏ†ïÎêòÏóàÏäµÎãàÎã§.');
      res.redirect(`/work-orders/${req.params.id}`);
      return;
    }
    
    // Í∑∏ Ïô∏Ïùò Í≤ΩÏö∞ 404 Ïò§Î•ò
    res.status(404).json({ error: 'POST ÏöîÏ≤≠ÏùÄ ÏßÄÏõêÎêòÏßÄ ÏïäÏäµÎãàÎã§. PUTÏùÑ ÏÇ¨Ïö©ÌïòÏÑ∏Ïöî.' });
  } catch (error) {
    console.error('POST to PUT Ï≤òÎ¶¨ Ïò§Î•ò:', error);
    console.error('Ïò§Î•ò ÏÉÅÏÑ∏:', error);
    req.flash('error', 'Í∑ºÎ¨¥Î™ÖÎ†πÏÑú ÏàòÏ†ï Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ' + error.message);
    res.redirect(`/work-orders/${req.params.id}/edit`);
  }
});

// Í∑ºÎ¨¥Î™ÖÎ†πÏÑú ÏÇ≠Ï†ú
router.delete('/:id', isLoggedIn, adminOnly, async (req, res) => {
  try {
    const workOrder = await WorkOrder.findById(req.params.id);
    
    if (!workOrder) {
      return res.status(404).json({ 
        success: false,
        message: 'Í∑ºÎ¨¥Î™ÖÎ†πÏÑúÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.'
      });
    }
    
    await WorkOrder.findByIdAndDelete(req.params.id);
    
    // Î°úÍ∑∏ Í∏∞Î°ù
    await Log.create({
      userId: req.session.userId,
      action: 'DELETE_WORK_ORDER',
      details: `Í∑ºÎ¨¥Î™ÖÎ†πÏÑú ÏÇ≠Ï†ú: ${workOrder.workInfo.team} ${workOrder.workInfo.shift}`,
      ip: req.ip,
      userAgent: req.get('User-Agent')
    });
    
    res.json({ 
      success: true,
      message: 'Í∑ºÎ¨¥Î™ÖÎ†πÏÑúÍ∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.'
    });
  } catch (error) {
    console.error('Í∑ºÎ¨¥Î™ÖÎ†πÏÑú ÏÇ≠Ï†ú Ïò§Î•ò:', error);
    res.status(500).json({ 
      success: false,
      message: 'Í∑ºÎ¨¥Î™ÖÎ†πÏÑú ÏÇ≠Ï†ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.'
    });
  }
});

// Í∑ºÎ¨¥Î™ÖÎ†πÏÑú ÏÉÅÌÉú Î≥ÄÍ≤Ω
router.patch('/:id/status', isLoggedIn, adminOnly, async (req, res) => {
  try {
    const { status } = req.body;
    const workOrder = await WorkOrder.findById(req.params.id);
    
    if (!workOrder) {
      return res.status(404).json({ 
        success: false,
        message: 'Í∑ºÎ¨¥Î™ÖÎ†πÏÑúÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.'
      });
    }
    
    workOrder.status = status;
    workOrder.updatedBy = req.session.userId;
    await workOrder.save();
    
    // Î°úÍ∑∏ Í∏∞Î°ù
    await Log.create({
      userId: req.session.userId,
      action: 'UPDATE_WORK_ORDER_STATUS',
      details: `Í∑ºÎ¨¥Î™ÖÎ†πÏÑú ÏÉÅÌÉú Î≥ÄÍ≤Ω: ${workOrder.workInfo.team} ${workOrder.workInfo.shift} -> ${status}`,
      ip: req.ip,
      userAgent: req.get('User-Agent')
    });
    
    res.json({ 
      success: true,
      message: 'Í∑ºÎ¨¥Î™ÖÎ†πÏÑú ÏÉÅÌÉúÍ∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Î≥ÄÍ≤ΩÎêòÏóàÏäµÎãàÎã§.',
      status: status
    });
  } catch (error) {
    console.error('Í∑ºÎ¨¥Î™ÖÎ†πÏÑú ÏÉÅÌÉú Î≥ÄÍ≤Ω Ïò§Î•ò:', error);
    res.status(500).json({ 
      success: false,
      message: 'Í∑ºÎ¨¥Î™ÖÎ†πÏÑú ÏÉÅÌÉú Î≥ÄÍ≤Ω Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.'
    });
  }
});

// Í∑ºÎ¨¥ Ïä§ÏºÄÏ§Ñ ÏûêÎèô ÏÑ§Ï†ï API
router.get('/api/schedule/:date/:team', isLoggedIn, async (req, res) => {
  try {
    const { date, team } = req.params;
    const selectedDate = new Date(date);
    const dayOfWeek = selectedDate.getDay(); // 0: ÏùºÏöîÏùº, 1: ÏõîÏöîÏùº, ..., 6: ÌÜ†ÏöîÏùº
    
    // ÌòÑÏû¨ Ï£ºÏ∞®Ïùò Ïä§ÏºÄÏ§Ñ Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
    const WorkSchedule = require('../models/WorkSchedule');
    const weekStart = getWeekStart(selectedDate);
    const weekEnd = getWeekEnd(selectedDate);
    
    const currentSchedule = await WorkSchedule.findOne({
      weekStartDate: weekStart,
      weekEndDate: weekEnd,
      status: 'active'
    });
    
    let shift, startTime, endTime;
    
    // Ï£ºÏ∞®Î≥Ñ Ïä§ÏºÄÏ§ÑÏù¥ ÏûàÎäî Í≤ΩÏö∞ Ìï¥Îãπ Ïä§ÏºÄÏ§Ñ ÏÇ¨Ïö©
    if (currentSchedule) {
      const teamSchedule = getTeamScheduleFromWorkSchedule(team, currentSchedule);
      shift = teamSchedule.shift;
      startTime = teamSchedule.startTime;
      endTime = teamSchedule.endTime;
    } else {
      // Í∏∞Î≥∏ Ïä§ÏºÄÏ§Ñ ÏÇ¨Ïö© (Ïù¥Î≤àÏ£ºÎäî 1Î∞òÏù¥ Ïã¨ÏïºÏ°∞)
      const defaultSchedule = getDefaultSchedule(team, dayOfWeek);
      shift = defaultSchedule.shift;
      startTime = defaultSchedule.startTime;
      endTime = defaultSchedule.endTime;
    }
    
    res.json({
      success: true,
      data: {
        shift,
        startTime,
        endTime,
        dayOfWeek: dayOfWeek,
        dayName: ['ÏùºÏöîÏùº', 'ÏõîÏöîÏùº', 'ÌôîÏöîÏùº', 'ÏàòÏöîÏùº', 'Î™©ÏöîÏùº', 'Í∏àÏöîÏùº', 'ÌÜ†ÏöîÏùº'][dayOfWeek]
      }
    });
    
  } catch (error) {
    console.error('Í∑ºÎ¨¥ Ïä§ÏºÄÏ§Ñ ÏûêÎèô ÏÑ§Ï†ï Ïò§Î•ò:', error);
    res.status(500).json({ 
      success: false, 
      message: 'Í∑ºÎ¨¥ Ïä§ÏºÄÏ§Ñ ÏûêÎèô ÏÑ§Ï†ï Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.' 
    });
  }
});

// Ï£ºÏ∞® ÏãúÏûëÏùº Í≥ÑÏÇ∞ (ÏõîÏöîÏùº 06:00)
function getWeekStart(date) {
  const day = date.getDay();
  const diff = date.getDate() - day + (day === 0 ? -6 : 1);
  const weekStart = new Date(date.setDate(diff));
  weekStart.setHours(6, 0, 0, 0);
  return weekStart;
}

// Ï£ºÏ∞® Ï¢ÖÎ£åÏùº Í≥ÑÏÇ∞ (Îã§ÏùåÏ£º ÏõîÏöîÏùº 06:00)
function getWeekEnd(date) {
  const weekStart = getWeekStart(date);
  const weekEnd = new Date(weekStart);
  weekEnd.setDate(weekStart.getDate() + 7);
  weekEnd.setHours(6, 0, 0, 0);
  return weekEnd;
}

// WorkScheduleÏóêÏÑú ÌåÄÎ≥Ñ Ïä§ÏºÄÏ§Ñ Ï∂îÏ∂ú
function getTeamScheduleFromWorkSchedule(team, schedule) {
  const teamMap = {
    'Î≥¥Ïïà1Î∞ò': 'team1',
    'Î≥¥Ïïà2Î∞ò': 'team2', 
    'Î≥¥Ïïà3Î∞ò': 'team3'
  };
  
  const teamKey = teamMap[team];
  if (!teamKey || !schedule.currentWeekSchedule[teamKey]) {
    return { shift: '', startTime: '', endTime: '' };
  }
  
  const teamSchedule = schedule.currentWeekSchedule[teamKey];
  
  // Ïä§ÏºÄÏ§Ñ Îß§Ìïë
  const scheduleMap = {
    'Ï∂úÍ∑º(Ï¥à)': { shift: 'Ïã¨ÏïºÏ°∞', startTime: '14:00', endTime: '22:00' },
    'Ï∂úÍ∑º(Ïã¨)': { shift: 'ÏïºÍ∞ÑÏ°∞', startTime: '22:00', endTime: '06:00' },
    'Ï∂úÍ∑º(Ï£º)': { shift: 'Ï£ºÍ∞ÑÏ°∞', startTime: '06:00', endTime: '14:00' }
  };
  
  return scheduleMap[teamSchedule] || { shift: '', startTime: '', endTime: '' };
}

// Í∏∞Î≥∏ Ïä§ÏºÄÏ§Ñ (Ïù¥Î≤àÏ£ºÎäî 1Î∞òÏù¥ Ïã¨ÏïºÏ°∞)
function getDefaultSchedule(team, dayOfWeek) {
  // ÌèâÏùº Ïä§ÏºÄÏ§Ñ (Ïõî~Í∏à) - 9Ïõî 3Ïùº Í∏∞Ï§Ä
  if (dayOfWeek >= 1 && dayOfWeek <= 5) {
    switch (team) {
      case 'Î≥¥Ïïà1Î∞ò':
        return { shift: 'Ïã¨ÏïºÏ°∞', startTime: '22:00', endTime: '06:00' };
      case 'Î≥¥Ïïà2Î∞ò':
        return { shift: 'Ï£ºÍ∞ÑÏ°∞', startTime: '06:00', endTime: '14:00' };
      case 'Î≥¥Ïïà3Î∞ò':
        return { shift: 'Ï¥àÏïºÏ°∞', startTime: '14:00', endTime: '22:00' };
    }
  }
  
  // Ï£ºÎßê Ïä§ÏºÄÏ§Ñ (ÌÜ†ÏöîÏùº, ÏùºÏöîÏùº)
  if (dayOfWeek === 6) { // ÌÜ†ÏöîÏùº
    switch (team) {
      case 'Î≥¥Ïïà1Î∞ò':
        return { shift: 'Ìú¥Î¨¥', startTime: '', endTime: '' };
      case 'Î≥¥Ïïà2Î∞ò':
        return { shift: 'Ï£ºÍ∞ÑÏ°∞', startTime: '06:00', endTime: '18:00' };
      case 'Î≥¥Ïïà3Î∞ò':
        return { shift: 'ÏïºÍ∞ÑÏ°∞', startTime: '18:00', endTime: '06:00' };
    }
  } else { // ÏùºÏöîÏùº
    switch (team) {
      case 'Î≥¥Ïïà1Î∞ò':
        return { shift: 'Ï£ºÍ∞ÑÏ°∞', startTime: '06:00', endTime: '18:00' };
      case 'Î≥¥Ïïà2Î∞ò':
        return { shift: 'ÏïºÍ∞ÑÏ°∞', startTime: '18:00', endTime: '06:00' };
      case 'Î≥¥Ïïà3Î∞ò':
        return { shift: 'Ìú¥Î¨¥', startTime: '', endTime: '' };
    }
  }
  
  return { shift: '', startTime: '', endTime: '' };
}

module.exports = router;
